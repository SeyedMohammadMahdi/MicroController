
t.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b44  08004b44  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004b44  08004b44  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b44  08004b44  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001090  20000088  08004bd4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  08004bd4  00021118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a1  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7a  00000000  00000000  0002b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d9  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccec  00000000  00000000  00046b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9b2  00000000  00000000  0005383d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df1ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004058  00000000  00000000  000df240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080049b8 	.word	0x080049b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080049b8 	.word	0x080049b8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_f2iz>:
 80009ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009b4:	d30f      	bcc.n	80009d6 <__aeabi_f2iz+0x2a>
 80009b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009be:	d90d      	bls.n	80009dc <__aeabi_f2iz+0x30>
 80009c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009cc:	fa23 f002 	lsr.w	r0, r3, r2
 80009d0:	bf18      	it	ne
 80009d2:	4240      	negne	r0, r0
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr
 80009dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009e0:	d101      	bne.n	80009e6 <__aeabi_f2iz+0x3a>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	d105      	bne.n	80009f2 <__aeabi_f2iz+0x46>
 80009e6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009ea:	bf08      	it	eq
 80009ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009fc:	f000 ff00 	bl	8001800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a00:	f000 f816 	bl	8000a30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a04:	f000 f8cc 	bl	8000ba0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000a08:	f000 f854 	bl	8000ab4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000a0c:	f000 f89e 	bl	8000b4c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <main+0x2c>)
 8000a12:	f001 ff35 	bl	8002880 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &input, sizeof(input));
 8000a16:	2201      	movs	r2, #1
 8000a18:	4903      	ldr	r1, [pc, #12]	; (8000a28 <main+0x30>)
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <main+0x34>)
 8000a1c:	f002 fb27 	bl	800306e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a20:	e7fe      	b.n	8000a20 <main+0x28>
 8000a22:	bf00      	nop
 8000a24:	200000a4 	.word	0x200000a4
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	200000ec 	.word	0x200000ec

08000a30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b090      	sub	sp, #64	; 0x40
 8000a34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	2228      	movs	r2, #40	; 0x28
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 ff4e 	bl	80038e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a66:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fa9b 	bl	8001fac <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x50>
		Error_Handler();
 8000a7c:	f000 fcf8 	bl	8001470 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fd08 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x7a>
		Error_Handler();
 8000aa6:	f000 fce3 	bl	8001470 <Error_Handler>
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3740      	adds	r7, #64	; 0x40
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 47999;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000ae6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000aea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000afa:	f001 fe71 	bl	80027e0 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000b04:	f000 fcb4 	bl	8001470 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000b16:	f002 f80d 	bl	8002b34 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000b20:	f000 fca6 	bl	8001470 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM2_Init+0x94>)
 8000b32:	f002 f9df 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000b3c:	f000 fc98 	bl	8001470 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000a4 	.word	0x200000a4

08000b4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART1_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f002 fa26 	bl	8002fd4 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b8e:	f000 fc6f 	bl	8001470 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000ec 	.word	0x200000ec
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bd2:	f043 0308 	orr.w	r3, r3, #8
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2,
 8000be4:	2200      	movs	r2, #0
 8000be6:	2107      	movs	r1, #7
 8000be8:	4815      	ldr	r0, [pc, #84]	; (8000c40 <MX_GPIO_Init+0xa0>)
 8000bea:	f001 f9ad 	bl	8001f48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f643 4103 	movw	r1, #15363	; 0x3c03
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_GPIO_Init+0xa4>)
 8000bf6:	f001 f9a7 	bl	8001f48 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0xa0>)
 8000c12:	f001 f815 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB10 PB11
	 PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8000c16:	f643 4303 	movw	r3, #15363	; 0x3c03
 8000c1a:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2302      	movs	r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_GPIO_Init+0xa4>)
 8000c30:	f001 f806 	bl	8001c40 <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	static int fiveSecond = 5000;
	static int oneSec = 1000;

	static exLedFreq = 100;
	if (htim->Instance == TIM2) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	f040 813b 	bne.w	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x28a>
		if (counter == 100) {
 8000c5c:	4b9f      	ldr	r3, [pc, #636]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b64      	cmp	r3, #100	; 0x64
 8000c62:	d10b      	bne.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>
			counter = 0;
 8000c64:	4b9d      	ldr	r3, [pc, #628]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
			if (entered == 0) {
 8000c6a:	4b9d      	ldr	r3, [pc, #628]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x34>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13);
 8000c72:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c76:	489b      	ldr	r0, [pc, #620]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000c78:	f001 f97e 	bl	8001f78 <HAL_GPIO_TogglePin>
			}
		}

		int temp = percent;
 8000c7c:	4b9a      	ldr	r3, [pc, #616]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60bb      	str	r3, [r7, #8]
		if (state == 0) {
 8000c82:	4b9a      	ldr	r3, [pc, #616]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d131      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0xa6>
			state++;
 8000c8a:	4b98      	ldr	r3, [pc, #608]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a96      	ldr	r2, [pc, #600]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000c92:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2106      	movs	r1, #6
 8000c98:	4895      	ldr	r0, [pc, #596]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000c9a:	f001 f955 	bl	8001f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4893      	ldr	r0, [pc, #588]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ca4:	f001 f950 	bl	8001f48 <HAL_GPIO_WritePin>
			decode(percent / 100, bcd);
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a91      	ldr	r2, [pc, #580]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000cae:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb2:	1152      	asrs	r2, r2, #5
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	498f      	ldr	r1, [pc, #572]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f9b2 	bl	8001024 <decode>
			for (int i = 0; i < 4; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00f      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x9e>
				HAL_GPIO_WritePin(GPIOB, IC[i], bcd[i]);
 8000cc6:	4a8d      	ldr	r2, [pc, #564]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000cce:	4a8a      	ldr	r2, [pc, #552]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4882      	ldr	r0, [pc, #520]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cdc:	f001 f934 	bl	8001f48 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	ddec      	ble.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000cec:	e076      	b.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x194>
			}
		} else if (state == 1) {
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d13b      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x126>
			state++;
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a7b      	ldr	r2, [pc, #492]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000cfe:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2105      	movs	r1, #5
 8000d04:	487a      	ldr	r0, [pc, #488]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d06:	f001 f91f 	bl	8001f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4878      	ldr	r0, [pc, #480]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d10:	f001 f91a 	bl	8001f48 <HAL_GPIO_WritePin>
			decode((percent / 10) % 10, bcd);
 8000d14:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1e:	1092      	asrs	r2, r2, #2
 8000d20:	17db      	asrs	r3, r3, #31
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	4b76      	ldr	r3, [pc, #472]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac8      	subs	r0, r1, r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4403      	add	r3, r0
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad0      	subs	r0, r2, r3
 8000d3a:	496f      	ldr	r1, [pc, #444]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d3c:	f000 f972 	bl	8001024 <decode>
			for (int i = 0; i < 4; i++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	e00f      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x11e>
				HAL_GPIO_WritePin(GPIOB, IC[i], bcd[i]);
 8000d46:	4a6d      	ldr	r2, [pc, #436]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d4e:	4a6a      	ldr	r2, [pc, #424]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4862      	ldr	r0, [pc, #392]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d5c:	f001 f8f4 	bl	8001f48 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3301      	adds	r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	ddec      	ble.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000d6c:	e036      	b.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x194>
			}
		} else if (state == 2) {
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d132      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x194>
			state = 0;
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	485b      	ldr	r0, [pc, #364]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d82:	f001 f8e1 	bl	8001f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4859      	ldr	r0, [pc, #356]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d8c:	f001 f8dc 	bl	8001f48 <HAL_GPIO_WritePin>
			decode(percent % 10, bcd);
 8000d90:	4b55      	ldr	r3, [pc, #340]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000d96:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9a:	1099      	asrs	r1, r3, #2
 8000d9c:	17d3      	asrs	r3, r2, #31
 8000d9e:	1ac8      	subs	r0, r1, r3
 8000da0:	4603      	mov	r3, r0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4403      	add	r3, r0
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1ad0      	subs	r0, r2, r3
 8000daa:	4953      	ldr	r1, [pc, #332]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000dac:	f000 f93a 	bl	8001024 <decode>
			for (int i = 0; i < 4; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e00f      	b.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x18e>
				HAL_GPIO_WritePin(GPIOB, IC[i], bcd[i]);
 8000db6:	4a51      	ldr	r2, [pc, #324]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4846      	ldr	r0, [pc, #280]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000dcc:	f001 f8bc 	bl	8001f48 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	ddec      	ble.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16e>
			}
		}

		if (wordEnterd) {
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d010      	beq.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x1be>
			if (oneSec % exLedFreq == 0) {
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	fb93 f1f2 	sdiv	r1, r3, r2
 8000df0:	fb01 f202 	mul.w	r2, r1, r2
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d124      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e00:	f001 f8ba 	bl	8001f78 <HAL_GPIO_TogglePin>
 8000e04:	e01e      	b.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			}
		} else if (fiveSec) {
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d010      	beq.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			if (fiveSecond % exLedFreq == 0) {
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e1a:	fb01 f202 	mul.w	r2, r1, r2
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10f      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e2a:	f001 f8a5 	bl	8001f78 <HAL_GPIO_TogglePin>
 8000e2e:	e009      	b.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			}
		} else if (entered) {
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e40:	f001 f882 	bl	8001f48 <HAL_GPIO_WritePin>
		}

		if (percent >= 60) {
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b3b      	cmp	r3, #59	; 0x3b
 8000e4a:	dd06      	ble.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x212>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e54:	f001 f878 	bl	8001f48 <HAL_GPIO_WritePin>
 8000e58:	e00d      	b.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x22e>
		} else if (entered && percent < 60) {
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d009      	beq.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x22e>
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b3b      	cmp	r3, #59	; 0x3b
 8000e68:	dc05      	bgt.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x22e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e72:	f001 f869 	bl	8001f48 <HAL_GPIO_WritePin>
		}
		if (fiveSec) {
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d010      	beq.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x258>
			fiveSecond--;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000e86:	6013      	str	r3, [r2, #0]
			if (fiveSecond == 0) {
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11b      	bne.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x280>
				fiveSecond = 5000;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e96:	601a      	str	r2, [r3, #0]
				fiveSec = 0;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e013      	b.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x280>
			}

		} else if (wordEnterd) {
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x280>
			oneSec--;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000eb0:	6013      	str	r3, [r2, #0]
			if (oneSec == 0) {
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d106      	bne.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x280>
				wordEnterd = 0;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
				oneSec = 1000;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec6:	601a      	str	r2, [r3, #0]
			}
		}
		counter++;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000ed0:	6013      	str	r3, [r2, #0]

	}
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000914 	.word	0x20000914
 8000ee0:	20000134 	.word	0x20000134
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	20000130 	.word	0x20000130
 8000eec:	20000918 	.word	0x20000918
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	51eb851f 	.word	0x51eb851f
 8000ef8:	2000091c 	.word	0x2000091c
 8000efc:	20000004 	.word	0x20000004
 8000f00:	66666667 	.word	0x66666667
 8000f04:	20000910 	.word	0x20000910
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	2000090c 	.word	0x2000090c
 8000f14:	20000014 	.word	0x20000014

08000f18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	static index = 0;
	static char str3[1000];
	static char str4[1000];
	if (huart->Instance == USART1) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a31      	ldr	r2, [pc, #196]	; (8000fec <HAL_UART_RxCpltCallback+0xd4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d15c      	bne.n	8000fe4 <HAL_UART_RxCpltCallback+0xcc>
		if (entered == 0) {
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <HAL_UART_RxCpltCallback+0xd8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x20>
			entered = 1;
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_UART_RxCpltCallback+0xd8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
		}
		if ((int) input == 32) {
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_UART_RxCpltCallback+0xdc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d108      	bne.n	8000f52 <HAL_UART_RxCpltCallback+0x3a>
			wordEnterd = 1;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_UART_RxCpltCallback+0xe0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	482b      	ldr	r0, [pc, #172]	; (8000ffc <HAL_UART_RxCpltCallback+0xe4>)
 8000f4e:	f000 fffb 	bl	8001f48 <HAL_GPIO_WritePin>
		}

		if ((int) input == 13) {
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_UART_RxCpltCallback+0xdc>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b0d      	cmp	r3, #13
 8000f58:	d10b      	bne.n	8000f72 <HAL_UART_RxCpltCallback+0x5a>
			sentenceTurn++;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_UART_RxCpltCallback+0xe8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <HAL_UART_RxCpltCallback+0xe8>)
 8000f62:	6013      	str	r3, [r2, #0]
			index = 0;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_UART_RxCpltCallback+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
			fiveSec = 1;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_UART_RxCpltCallback+0xf0>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e020      	b.n	8000fb4 <HAL_UART_RxCpltCallback+0x9c>

		} else if (sentenceTurn == 0) {
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_UART_RxCpltCallback+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_UART_RxCpltCallback+0x7c>
			str1[index] = input;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_UART_RxCpltCallback+0xec>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_UART_RxCpltCallback+0xdc>)
 8000f80:	7811      	ldrb	r1, [r2, #0]
 8000f82:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_UART_RxCpltCallback+0xf4>)
 8000f84:	54d1      	strb	r1, [r2, r3]
			str1[index + 1] = '\0';
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_UART_RxCpltCallback+0xec>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	; (800100c <HAL_UART_RxCpltCallback+0xf4>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	54d1      	strb	r1, [r2, r3]
 8000f92:	e00f      	b.n	8000fb4 <HAL_UART_RxCpltCallback+0x9c>
		} else if (sentenceTurn == 1) {
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_UART_RxCpltCallback+0xe8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_UART_RxCpltCallback+0x9c>
			str2[index] = input;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_RxCpltCallback+0xec>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_UART_RxCpltCallback+0xdc>)
 8000fa2:	7811      	ldrb	r1, [r2, #0]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_UART_RxCpltCallback+0xf8>)
 8000fa6:	54d1      	strb	r1, [r2, r3]
			str2[index + 1] = '\0';
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_UART_RxCpltCallback+0xec>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_UART_RxCpltCallback+0xf8>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	54d1      	strb	r1, [r2, r3]
		}

		if (sentenceTurn == 2) {
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_UART_RxCpltCallback+0xe8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d10e      	bne.n	8000fda <HAL_UART_RxCpltCallback+0xc2>
//			if (!strcmp(str1, str2)){
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
			strcpy(str3, str1);
 8000fbc:	4913      	ldr	r1, [pc, #76]	; (800100c <HAL_UART_RxCpltCallback+0xf4>)
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <HAL_UART_RxCpltCallback+0xfc>)
 8000fc0:	f002 fc96 	bl	80038f0 <strcpy>
			strcpy(str4, str2);
 8000fc4:	4912      	ldr	r1, [pc, #72]	; (8001010 <HAL_UART_RxCpltCallback+0xf8>)
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <HAL_UART_RxCpltCallback+0x100>)
 8000fc8:	f002 fc92 	bl	80038f0 <strcpy>
				percent = compare(str3, str4);
 8000fcc:	4912      	ldr	r1, [pc, #72]	; (8001018 <HAL_UART_RxCpltCallback+0x100>)
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <HAL_UART_RxCpltCallback+0xfc>)
 8000fd0:	f000 f8ee 	bl	80011b0 <compare>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_UART_RxCpltCallback+0x104>)
 8000fd8:	6013      	str	r3, [r2, #0]
//			}
		}
		HAL_UART_Receive_IT(&huart1, &input, sizeof(input));
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <HAL_UART_RxCpltCallback+0xdc>)
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_UART_RxCpltCallback+0x108>)
 8000fe0:	f002 f845 	bl	800306e <HAL_UART_Receive_IT>
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	20000134 	.word	0x20000134
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000910 	.word	0x20000910
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	20000138 	.word	0x20000138
 8001004:	2000092c 	.word	0x2000092c
 8001008:	2000090c 	.word	0x2000090c
 800100c:	2000013c 	.word	0x2000013c
 8001010:	20000524 	.word	0x20000524
 8001014:	20000930 	.word	0x20000930
 8001018:	20000d18 	.word	0x20000d18
 800101c:	20000130 	.word	0x20000130
 8001020:	200000ec 	.word	0x200000ec

08001024 <decode>:

void decode(int num, int BCD[4]) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	switch (num) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b09      	cmp	r3, #9
 8001032:	f200 80b7 	bhi.w	80011a4 <decode+0x180>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <decode+0x18>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	08001065 	.word	0x08001065
 8001040:	08001085 	.word	0x08001085
 8001044:	080010a5 	.word	0x080010a5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010e5 	.word	0x080010e5
 8001050:	08001105 	.word	0x08001105
 8001054:	08001125 	.word	0x08001125
 8001058:	08001145 	.word	0x08001145
 800105c:	08001165 	.word	0x08001165
 8001060:	08001185 	.word	0x08001185
	case 0:
		BCD[3] = 0;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	330c      	adds	r3, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3308      	adds	r3, #8
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
		BCD[0] = 0;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
		break;
 8001082:	e090      	b.n	80011a6 <decode+0x182>
	case 1:
		BCD[3] = 0;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	330c      	adds	r3, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3308      	adds	r3, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	3304      	adds	r3, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
		BCD[0] = 1;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
		break;
 80010a2:	e080      	b.n	80011a6 <decode+0x182>
	case 2:
		BCD[3] = 0;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	330c      	adds	r3, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3308      	adds	r3, #8
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
		BCD[1] = 1;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3304      	adds	r3, #4
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
		BCD[0] = 0;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
		break;
 80010c2:	e070      	b.n	80011a6 <decode+0x182>
	case 3:
		BCD[3] = 0;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	330c      	adds	r3, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3308      	adds	r3, #8
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
		BCD[1] = 1;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3304      	adds	r3, #4
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
		BCD[0] = 1;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	e060      	b.n	80011a6 <decode+0x182>
	case 4:
		BCD[3] = 0;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	330c      	adds	r3, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		BCD[2] = 1;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3308      	adds	r3, #8
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3304      	adds	r3, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
		BCD[0] = 0;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		break;
 8001102:	e050      	b.n	80011a6 <decode+0x182>
	case 5:
		BCD[3] = 0;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	330c      	adds	r3, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
		BCD[2] = 1;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	3308      	adds	r3, #8
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
		BCD[0] = 1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
		break;
 8001122:	e040      	b.n	80011a6 <decode+0x182>
	case 6:
		BCD[3] = 0;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
		BCD[2] = 1;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3308      	adds	r3, #8
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
		BCD[1] = 1;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3304      	adds	r3, #4
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
		BCD[0] = 0;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
		break;
 8001142:	e030      	b.n	80011a6 <decode+0x182>
	case 7:
		BCD[3] = 0;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	330c      	adds	r3, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
		BCD[2] = 1;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3308      	adds	r3, #8
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
		BCD[1] = 1;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
		BCD[0] = 1;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
		break;
 8001162:	e020      	b.n	80011a6 <decode+0x182>
	case 8:
		BCD[3] = 1;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	330c      	adds	r3, #12
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3308      	adds	r3, #8
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3304      	adds	r3, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
		BCD[0] = 0;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
		break;
 8001182:	e010      	b.n	80011a6 <decode+0x182>
	case 9:
		BCD[3] = 1;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	330c      	adds	r3, #12
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
		BCD[2] = 0;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3308      	adds	r3, #8
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
		BCD[1] = 0;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		BCD[0] = 1;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
		break;
 80011a2:	e000      	b.n	80011a6 <decode+0x182>
	default:
		break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <compare>:


int compare(char *str1, char *str2) {
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	f5ad 6dcf 	sub.w	sp, sp, #1656	; 0x678
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80011be:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80011c2:	6018      	str	r0, [r3, #0]
 80011c4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80011c8:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80011cc:	6019      	str	r1, [r3, #0]
    int str1_length = strlen(str1);
 80011ce:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80011d2:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f7fe ffc2 	bl	8000160 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    int str2_length = strlen(str2);
 80011e2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80011e6:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f7fe ffb8 	bl	8000160 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
    char *words1[200];
    char *words2[200];
    char *word;
    int i, j, count1 = 0, count2 = 0, similar1 = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    float similar_words = 0;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
    // Split string1 into words
    word = strtok(str1, " \n");
 8001210:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001214:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 8001218:	4992      	ldr	r1, [pc, #584]	; (8001464 <compare+0x2b4>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f002 fb70 	bl	8003900 <strtok>
 8001220:	f8c7 0674 	str.w	r0, [r7, #1652]	; 0x674
    while (word != NULL && count1 < 200) {
 8001224:	e012      	b.n	800124c <compare+0x9c>
        words1[count1++] = word;
 8001226:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	f8c7 2668 	str.w	r2, [r7, #1640]	; 0x668
 8001230:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8001234:	f5a2 7254 	sub.w	r2, r2, #848	; 0x350
 8001238:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 800123c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        word = strtok(NULL, " \n");
 8001240:	4988      	ldr	r1, [pc, #544]	; (8001464 <compare+0x2b4>)
 8001242:	2000      	movs	r0, #0
 8001244:	f002 fb5c 	bl	8003900 <strtok>
 8001248:	f8c7 0674 	str.w	r0, [r7, #1652]	; 0x674
    while (word != NULL && count1 < 200) {
 800124c:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <compare+0xac>
 8001254:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8001258:	2bc7      	cmp	r3, #199	; 0xc7
 800125a:	dde4      	ble.n	8001226 <compare+0x76>
    }

    // Split string2 into words
    word = strtok(str2, " \n");
 800125c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001260:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8001264:	497f      	ldr	r1, [pc, #508]	; (8001464 <compare+0x2b4>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f002 fb4a 	bl	8003900 <strtok>
 800126c:	f8c7 0674 	str.w	r0, [r7, #1652]	; 0x674
    while (word != NULL && count2 < 200) {
 8001270:	e012      	b.n	8001298 <compare+0xe8>
        words2[count2++] = word;
 8001272:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	f8c7 2664 	str.w	r2, [r7, #1636]	; 0x664
 800127c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8001280:	f5a2 62ce 	sub.w	r2, r2, #1648	; 0x670
 8001284:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8001288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        word = strtok(NULL, " \n");
 800128c:	4975      	ldr	r1, [pc, #468]	; (8001464 <compare+0x2b4>)
 800128e:	2000      	movs	r0, #0
 8001290:	f002 fb36 	bl	8003900 <strtok>
 8001294:	f8c7 0674 	str.w	r0, [r7, #1652]	; 0x674
    while (word != NULL && count2 < 200) {
 8001298:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <compare+0xf8>
 80012a0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80012a4:	2bc7      	cmp	r3, #199	; 0xc7
 80012a6:	dde4      	ble.n	8001272 <compare+0xc2>
    }
    
    long int index_1 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
    long int index_2 = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
    // Compare the words in both strings
    for (i = 0; i < count1; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 80012ba:	e08c      	b.n	80013d6 <compare+0x226>
        index_2 = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        for (j = 0; j < count2; j++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 80012c8:	e069      	b.n	800139e <compare+0x1ee>
            if (strcmp(words1[i], words2[j]) == 0) {
 80012ca:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80012ce:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80012d2:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 80012d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80012da:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80012de:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80012e2:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80012e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7fe ff2e 	bl	800014c <strcmp>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13d      	bne.n	8001372 <compare+0x1c2>
                similar_words += 1.0 - abs(index_2 - index_1) / ((str1_length + str2_length) / 2.0);
 80012f6:	f8d7 0660 	ldr.w	r0, [r7, #1632]	; 0x660
 80012fa:	f7ff f89d 	bl	8000438 <__aeabi_f2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8001306:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	bfb8      	it	lt
 8001310:	425b      	neglt	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f87e 	bl	8000414 <__aeabi_i2d>
 8001318:	4680      	mov	r8, r0
 800131a:	4689      	mov	r9, r1
 800131c:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 8001320:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8001324:	4413      	add	r3, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f874 	bl	8000414 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001334:	f7ff fa02 	bl	800073c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4640      	mov	r0, r8
 800133e:	4649      	mov	r1, r9
 8001340:	f7ff f9fc 	bl	800073c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	f04f 0000 	mov.w	r0, #0
 800134c:	4946      	ldr	r1, [pc, #280]	; (8001468 <compare+0x2b8>)
 800134e:	f7fe ff13 	bl	8000178 <__aeabi_dsub>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4620      	mov	r0, r4
 8001358:	4629      	mov	r1, r5
 800135a:	f7fe ff0f 	bl	800017c <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fad1 	bl	800090c <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
                break;
 8001370:	e01b      	b.n	80013aa <compare+0x1fa>
            }
            index_2 += strlen(words2[j]);
 8001372:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001376:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 800137a:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe feec 	bl	8000160 <strlen>
 8001388:	4602      	mov	r2, r0
 800138a:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800138e:	4413      	add	r3, r2
 8001390:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        for (j = 0; j < count2; j++) {
 8001394:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800139e:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80013a2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db8f      	blt.n	80012ca <compare+0x11a>
        }
        index_1 += strlen(words1[i]);
 80013aa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80013ae:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80013b2:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe fed0 	bl	8000160 <strlen>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80013c6:	4413      	add	r3, r2
 80013c8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
    for (i = 0; i < count1; i++) {
 80013cc:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 80013d6:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 80013da:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80013de:	429a      	cmp	r2, r3
 80013e0:	f6ff af6c 	blt.w	80012bc <compare+0x10c>
    // }
    // hello new world
    // world counter hi hello

    // Calculate similarity percentage
    if (count1 == 0 || count2 == 0) {
 80013e4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <compare+0x244>
 80013ec:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <compare+0x248>
        return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e02e      	b.n	8001456 <compare+0x2a6>
    } else {
        float similarity = (similar_words * 100.0) / ((count1 + count2) / 2.0);
 80013f8:	f8d7 0660 	ldr.w	r0, [r7, #1632]	; 0x660
 80013fc:	f7ff f81c 	bl	8000438 <__aeabi_f2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <compare+0x2bc>)
 8001406:	f7ff f86f 	bl	80004e8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8001416:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800141a:	4413      	add	r3, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fff9 	bl	8000414 <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142a:	f7ff f987 	bl	800073c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f981 	bl	800073c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fa63 	bl	800090c <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
        return (int)similarity;
 800144c:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8001450:	f7ff faac 	bl	80009ac <__aeabi_f2iz>
 8001454:	4603      	mov	r3, r0
    }
}
 8001456:	4618      	mov	r0, r3
 8001458:	f507 67cf 	add.w	r7, r7, #1656	; 0x678
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001462:	bf00      	nop
 8001464:	080049d0 	.word	0x080049d0
 8001468:	3ff00000 	.word	0x3ff00000
 800146c:	40590000 	.word	0x40590000

08001470 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_MspInit+0x40>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_MspInit+0x40>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x40>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x40>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_MspInit+0x40>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_MspInit+0x40>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d0:	d113      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201c      	movs	r0, #28
 80014f0:	f000 fabf 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f000 fad8 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <HAL_UART_MspInit+0x9c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d139      	bne.n	800159c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 800152e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <HAL_UART_MspInit+0xa4>)
 800156e:	f000 fb67 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_UART_MspInit+0xa4>)
 8001588:	f000 fb5a 	bl	8001c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2025      	movs	r0, #37	; 0x25
 8001592:	f000 fa6e 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001596:	2025      	movs	r0, #37	; 0x25
 8001598:	f000 fa87 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f949 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f001 f98d 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000a4 	.word	0x200000a4

08001614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART1_IRQHandler+0x10>)
 800161a:	f001 fd59 	bl	80030d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000ec 	.word	0x200000ec

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001640:	f002 f924 	bl	800388c <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001668:	e7fe      	b.n	8001668 <_exit+0x12>

0800166a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e00a      	b.n	8001692 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167c:	f3af 8000 	nop.w
 8001680:	4601      	mov	r1, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf0      	blt.n	800167c <_read+0x12>
  }

  return len;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e009      	b.n	80016ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf1      	blt.n	80016b6 <_write+0x12>
  }
  return len;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_close>:

int _close(int file)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001702:	605a      	str	r2, [r3, #4]
  return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <_isatty>:

int _isatty(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f002 f88e 	bl	800388c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20001100 	.word	0x20001100
 80017a4:	20001118 	.word	0x20001118

080017a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017da:	f7ff ffe5 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f002 f85b 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff f909 	bl	80009f8 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80017f0:	08004b4c 	.word	0x08004b4c
  ldr r2, =_sbss
 80017f4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80017f8:	20001118 	.word	0x20001118

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f923 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fe2e 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f93b 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001868:	f000 f903 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000018 	.word	0x20000018
 8001884:	20000020 	.word	0x20000020
 8001888:	2000001c 	.word	0x2000001c

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_IncTick+0x20>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000020 	.word	0x20000020
 80018ac:	20001104 	.word	0x20001104

080018b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20001104 	.word	0x20001104

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4906      	ldr	r1, [pc, #24]	; (800195c <__NVIC_EnableIRQ+0x34>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a3c:	f7ff ff90 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff2d 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff42 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff90 	bl	80019b4 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5f 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff35 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d008      	beq.n	8001b06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2204      	movs	r2, #4
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e020      	b.n	8001b48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 020e 	bic.w	r2, r2, #14
 8001b14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d005      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e051      	b.n	8001c1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 020e 	bic.w	r2, r2, #14
 8001b84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_DMA_Abort_IT+0xd0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d029      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0xa0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <HAL_DMA_Abort_IT+0xd4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d022      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0x9c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_DMA_Abort_IT+0xd8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d01a      	beq.n	8001bea <HAL_DMA_Abort_IT+0x96>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_DMA_Abort_IT+0xdc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d012      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x90>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_DMA_Abort_IT+0xe0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00a      	beq.n	8001bde <HAL_DMA_Abort_IT+0x8a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_DMA_Abort_IT+0xe4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d102      	bne.n	8001bd8 <HAL_DMA_Abort_IT+0x84>
 8001bd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bd6:	e00e      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bdc:	e00b      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be2:	e008      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	e005      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bee:	e002      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	e000      	b.n	8001bf6 <HAL_DMA_Abort_IT+0xa2>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_DMA_Abort_IT+0xe8>)
 8001bf8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
    } 
  }
  return status;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020008 	.word	0x40020008
 8001c28:	4002001c 	.word	0x4002001c
 8001c2c:	40020030 	.word	0x40020030
 8001c30:	40020044 	.word	0x40020044
 8001c34:	40020058 	.word	0x40020058
 8001c38:	4002006c 	.word	0x4002006c
 8001c3c:	40020000 	.word	0x40020000

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e169      	b.n	8001f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c54:	2201      	movs	r2, #1
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8158 	bne.w	8001f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a9a      	ldr	r2, [pc, #616]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d05e      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a98      	ldr	r2, [pc, #608]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d875      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c82:	4a98      	ldr	r2, [pc, #608]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d058      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c88:	4a96      	ldr	r2, [pc, #600]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d86f      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c8e:	4a96      	ldr	r2, [pc, #600]	; (8001ee8 <HAL_GPIO_Init+0x2a8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d052      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c94:	4a94      	ldr	r2, [pc, #592]	; (8001ee8 <HAL_GPIO_Init+0x2a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d869      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c9a:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04c      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001ca0:	4a92      	ldr	r2, [pc, #584]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d863      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001ca6:	4a92      	ldr	r2, [pc, #584]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d046      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001cac:	4a90      	ldr	r2, [pc, #576]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d85d      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d82a      	bhi.n	8001d0c <HAL_GPIO_Init+0xcc>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d859      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_GPIO_Init+0x80>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d15 	.word	0x08001d15
 8001cc8:	08001d27 	.word	0x08001d27
 8001ccc:	08001d69 	.word	0x08001d69
 8001cd0:	08001d6f 	.word	0x08001d6f
 8001cd4:	08001d6f 	.word	0x08001d6f
 8001cd8:	08001d6f 	.word	0x08001d6f
 8001cdc:	08001d6f 	.word	0x08001d6f
 8001ce0:	08001d6f 	.word	0x08001d6f
 8001ce4:	08001d6f 	.word	0x08001d6f
 8001ce8:	08001d6f 	.word	0x08001d6f
 8001cec:	08001d6f 	.word	0x08001d6f
 8001cf0:	08001d6f 	.word	0x08001d6f
 8001cf4:	08001d6f 	.word	0x08001d6f
 8001cf8:	08001d6f 	.word	0x08001d6f
 8001cfc:	08001d6f 	.word	0x08001d6f
 8001d00:	08001d6f 	.word	0x08001d6f
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d31 	.word	0x08001d31
 8001d0c:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_GPIO_Init+0x2b4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d12:	e02c      	b.n	8001d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e029      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e024      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e01f      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	330c      	adds	r3, #12
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e01a      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d42:	2304      	movs	r3, #4
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e013      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	611a      	str	r2, [r3, #16]
          break;
 8001d5a:	e009      	b.n	8001d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	615a      	str	r2, [r3, #20]
          break;
 8001d66:	e003      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          break;
 8001d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d801      	bhi.n	8001d7a <HAL_GPIO_Init+0x13a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_Init+0x13e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d802      	bhi.n	8001d8c <HAL_GPIO_Init+0x14c>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x152>
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3b08      	subs	r3, #8
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	210f      	movs	r1, #15
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80b1 	beq.w	8001f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2bc>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_GPIO_Init+0x1ec>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00d      	beq.n	8001e28 <HAL_GPIO_Init+0x1e8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3e      	ldr	r2, [pc, #248]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <HAL_GPIO_Init+0x1e4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3d      	ldr	r2, [pc, #244]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_GPIO_Init+0x1e0>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e006      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x1ee>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e3e:	492f      	ldr	r1, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2bc>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	492c      	ldr	r1, [pc, #176]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4928      	ldr	r1, [pc, #160]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	491e      	ldr	r1, [pc, #120]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4918      	ldr	r1, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4914      	ldr	r1, [pc, #80]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d021      	beq.n	8001f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e021      	b.n	8001f22 <HAL_GPIO_Init+0x2e2>
 8001ede:	bf00      	nop
 8001ee0:	10320000 	.word	0x10320000
 8001ee4:	10310000 	.word	0x10310000
 8001ee8:	10220000 	.word	0x10220000
 8001eec:	10210000 	.word	0x10210000
 8001ef0:	10120000 	.word	0x10120000
 8001ef4:	10110000 	.word	0x10110000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40010800 	.word	0x40010800
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40011400 	.word	0x40011400
 8001f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f ae8e 	bne.w	8001c54 <HAL_GPIO_Init+0x14>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	372c      	adds	r7, #44	; 0x2c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43d9      	mvns	r1, r3
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	400b      	ands	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	611a      	str	r2, [r3, #16]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e272      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x12c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e24c      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x76>
 8002014:	4b80      	ldr	r3, [pc, #512]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7f      	ldr	r2, [pc, #508]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7a      	ldr	r2, [pc, #488]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b78      	ldr	r3, [pc, #480]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a77      	ldr	r2, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xbc>
 800204e:	4b72      	ldr	r3, [pc, #456]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002068:	4b6b      	ldr	r3, [pc, #428]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a67      	ldr	r2, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fc12 	bl	80018b0 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fc0e 	bl	80018b0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e200      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe4>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fbfe 	bl	80018b0 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fbfa 	bl	80018b0 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1ec      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x10c>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d063      	beq.n	80021ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1c0      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4939      	ldr	r1, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e03a      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_OscConfig+0x270>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fbb3 	bl	80018b0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff fbaf 	bl	80018b0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1a1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4927      	ldr	r1, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x270>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fb92 	bl	80018b0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7ff fb8e 	bl	80018b0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e180      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03a      	beq.n	8002230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_RCC_OscConfig+0x274>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7ff fb72 	bl	80018b0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff fb6e 	bl	80018b0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e160      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fad8 	bl	80027a4 <RCC_Delay>
 80021f4:	e01c      	b.n	8002230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_OscConfig+0x274>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7ff fb58 	bl	80018b0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002202:	e00f      	b.n	8002224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff fb54 	bl	80018b0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d908      	bls.n	8002224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e146      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	42420000 	.word	0x42420000
 8002220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e9      	bne.n	8002204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a6 	beq.w	800238a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]
 800225a:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7e      	ldr	r2, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7ff fb15 	bl	80018b0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7ff fb11 	bl	80018b0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e103      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x312>
 80022b0:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e02d      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x334>
 80022c6:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a69      	ldr	r2, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a66      	ldr	r2, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x356>
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7ff fac5 	bl	80018b0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7ff fac1 	bl	80018b0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0b1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x37e>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7ff faaf 	bl	80018b0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff faab 	bl	80018b0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e09b      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a3b      	ldr	r2, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d061      	beq.n	8002464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d146      	bne.n	8002436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa7f 	bl	80018b0 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7ff fa7b 	bl	80018b0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e06d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4921      	ldr	r1, [pc, #132]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a19      	ldr	r1, [r3, #32]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	430b      	orrs	r3, r1
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff fa4f 	bl	80018b0 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7ff fa4b 	bl	80018b0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x46a>
 8002434:	e035      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fa38 	bl	80018b0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff fa34 	bl	80018b0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e026      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x498>
 8002462:	e01e      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e019      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d0      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4965      	ldr	r1, [pc, #404]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b8      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800252e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494d      	ldr	r1, [pc, #308]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d040      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e073      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06b      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4936      	ldr	r1, [pc, #216]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7ff f986 	bl	80018b0 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7ff f982 	bl	80018b0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e053      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d210      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4922      	ldr	r1, [pc, #136]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e032      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4916      	ldr	r1, [pc, #88]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f821 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490a      	ldr	r1, [pc, #40]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1cc>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f8e4 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	080049e4 	.word	0x080049e4
 800267c:	20000018 	.word	0x20000018
 8002680:	2000001c 	.word	0x2000001c

08002684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b490      	push	{r4, r7}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_GetSysClockFreq+0xac>)
 800268c:	1d3c      	adds	r4, r7, #4
 800268e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002694:	f240 2301 	movw	r3, #513	; 0x201
 8002698:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x40>
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x46>
 80026c2:	e02b      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	623b      	str	r3, [r7, #32]
      break;
 80026c8:	e02b      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	0c9b      	lsrs	r3, r3, #18
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3328      	adds	r3, #40	; 0x28
 80026d4:	443b      	add	r3, r7
 80026d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	3328      	adds	r3, #40	; 0x28
 80026f2:	443b      	add	r3, r7
 80026f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fe:	fb03 f202 	mul.w	r2, r3, r2
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e004      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	623b      	str	r3, [r7, #32]
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6a3b      	ldr	r3, [r7, #32]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc90      	pop	{r4, r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	080049d4 	.word	0x080049d4
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	003d0900 	.word	0x003d0900

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <HAL_RCC_GetHCLKFreq+0x10>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000018 	.word	0x20000018

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff2 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	080049f4 	.word	0x080049f4

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffde 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	080049f4 	.word	0x080049f4

080027a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <RCC_Delay+0x34>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <RCC_Delay+0x38>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a5b      	lsrs	r3, r3, #9
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c0:	bf00      	nop
  }
  while (Delay --);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	60fa      	str	r2, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <RCC_Delay+0x1c>
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000018 	.word	0x20000018
 80027dc:	10624dd3 	.word	0x10624dd3

080027e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e041      	b.n	8002876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fe5a 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 fa70 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d001      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e03a      	b.n	800290e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_TIM_Base_Start_IT+0x98>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x58>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x58>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_TIM_Base_Start_IT+0x9c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x58>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_TIM_Base_Start_IT+0xa0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d010      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	e007      	b.n	800290c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0202 	mvn.w	r2, #2
 8002950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9b1 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9a4 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f9b3 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0204 	mvn.w	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f987 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f97a 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f989 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d122      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d11b      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0208 	mvn.w	r2, #8
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f95d 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f950 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f95f 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2208      	movs	r2, #8
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f933 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f926 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f935 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0201 	mvn.w	r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe f8d0 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa77 	bl	8002fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8f9 	bl	8002cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0220 	mvn.w	r2, #32
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa42 	bl	8002fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIM_ConfigClockSource+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0b3      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x180>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d03e      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0xd0>
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	f200 8087 	bhi.w	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	f000 8085 	beq.w	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d87f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002b9c:	2b70      	cmp	r3, #112	; 0x70
 8002b9e:	d01a      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0xa2>
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d87b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002ba4:	2b60      	cmp	r3, #96	; 0x60
 8002ba6:	d050      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x116>
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d877      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b50      	cmp	r3, #80	; 0x50
 8002bae:	d03c      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xf6>
 8002bb0:	2b50      	cmp	r3, #80	; 0x50
 8002bb2:	d873      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d058      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x136>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d86f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b30      	cmp	r3, #48	; 0x30
 8002bbe:	d064      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x156>
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d86b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d060      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x156>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d867      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05c      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x156>
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d05a      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bd4:	e062      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f000 f966 	bl	8002eb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	609a      	str	r2, [r3, #8]
      break;
 8002c02:	e04e      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f000 f94f 	bl	8002eb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c26:	609a      	str	r2, [r3, #8]
      break;
 8002c28:	e03b      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 f8c6 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2150      	movs	r1, #80	; 0x50
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f91d 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c48:	e02b      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8e4 	bl	8002e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2160      	movs	r1, #96	; 0x60
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f90d 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e01b      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f8a6 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f8fd 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e00b      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f000 f8f4 	bl	8002e82 <TIM_ITRx_SetConfig>
        break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <TIM_Base_SetConfig+0xbc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_Base_SetConfig+0xc0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <TIM_Base_SetConfig+0xbc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <TIM_Base_SetConfig+0xc0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d108      	bne.n	8002d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	615a      	str	r2, [r3, #20]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 0210 	bic.w	r2, r3, #16
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e046      	b.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800

08002fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e03f      	b.n	8003066 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fa84 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fba9 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	4613      	mov	r3, r2
 800307a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d11d      	bne.n	80030c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UART_Receive_IT+0x26>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e016      	b.n	80030c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Receive_IT+0x38>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e00f      	b.n	80030c6 <HAL_UART_Receive_IT+0x58>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9cf 	bl	800345e <UART_Start_Receive_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa7f 	bl	800361e <UART_Receive_IT>
      return;
 8003120:	e17b      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80b1 	beq.w	800328c <HAL_UART_IRQHandler+0x1bc>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_UART_IRQHandler+0x70>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a6 	beq.w	800328c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00f      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_UART_IRQHandler+0xee>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0208 	orr.w	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 811e 	beq.w	8003410 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_UART_IRQHandler+0x11e>
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa18 	bl	800361e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_UART_IRQHandler+0x146>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d031      	beq.n	800327a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f95a 	bl	80034d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003238:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4a76      	ldr	r2, [pc, #472]	; (8003420 <HAL_UART_IRQHandler+0x350>)
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fc80 	bl	8001b54 <HAL_DMA_Abort_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e00e      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8e3 	bl	8003436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	e00a      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8df 	bl	8003436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	e006      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8db 	bl	8003436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003286:	e0c3      	b.n	8003410 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	bf00      	nop
    return;
 800328a:	e0c1      	b.n	8003410 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 80a1 	bne.w	80033d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 809b 	beq.w	80033d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8095 	beq.w	80033d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04e      	beq.n	8003370 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032dc:	8a3b      	ldrh	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8098 	beq.w	8003414 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e8:	8a3a      	ldrh	r2, [r7, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	f080 8092 	bcs.w	8003414 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8a3a      	ldrh	r2, [r7, #16]
 80032f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d02b      	beq.n	8003358 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fbc3 	bl	8001ade <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f86d 	bl	8003448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800336e:	e051      	b.n	8003414 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003378:	b29b      	uxth	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d047      	beq.n	8003418 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003388:	8a7b      	ldrh	r3, [r7, #18]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d044      	beq.n	8003418 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800339c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0210 	bic.w	r2, r2, #16
 80033ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033cc:	8a7b      	ldrh	r3, [r7, #18]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f839 	bl	8003448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033d6:	e01f      	b.n	8003418 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_UART_IRQHandler+0x324>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8af 	bl	8003550 <UART_Transmit_IT>
    return;
 80033f2:	e012      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_UART_IRQHandler+0x34a>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8f0 	bl	80035ee <UART_EndTransmit_IT>
    return;
 800340e:	e004      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
    return;
 8003410:	bf00      	nop
 8003412:	e002      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
      return;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
      return;
 8003418:	bf00      	nop
  }
}
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	08003529 	.word	0x08003529

08003424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2222      	movs	r2, #34	; 0x22
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0220 	orr.w	r2, r2, #32
 80034c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0210 	bic.w	r2, r2, #16
 800350e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ff77 	bl	8003436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b21      	cmp	r3, #33	; 0x21
 8003562:	d13e      	bne.n	80035e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d114      	bne.n	8003598 <UART_Transmit_IT+0x48>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d110      	bne.n	8003598 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]
 8003596:	e008      	b.n	80035aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6211      	str	r1, [r2, #32]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4619      	mov	r1, r3
 80035b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff08 	bl	8003424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b22      	cmp	r3, #34	; 0x22
 8003630:	f040 8099 	bne.w	8003766 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d117      	bne.n	800366e <UART_Receive_IT+0x50>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	b29a      	uxth	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e026      	b.n	80036bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d007      	beq.n	8003692 <UART_Receive_IT+0x74>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <UART_Receive_IT+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e008      	b.n	80036b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4619      	mov	r1, r3
 80036ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d148      	bne.n	8003762 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0220 	bic.w	r2, r2, #32
 80036de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d123      	bne.n	8003758 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d10a      	bne.n	800374a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fe79 	bl	8003448 <HAL_UARTEx_RxEventCallback>
 8003756:	e002      	b.n	800375e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fd fbdd 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e002      	b.n	8003768 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037aa:	f023 030c 	bic.w	r3, r3, #12
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <UART_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7fe ffd0 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe ffb8 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	0119      	lsls	r1, r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	4419      	add	r1, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_SetConfig+0x118>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	440a      	add	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40013800 	.word	0x40013800
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <__errno>:
 800388c:	4b01      	ldr	r3, [pc, #4]	; (8003894 <__errno+0x8>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000024 	.word	0x20000024

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2600      	movs	r6, #0
 800389c:	4d0c      	ldr	r5, [pc, #48]	; (80038d0 <__libc_init_array+0x38>)
 800389e:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	f001 f886 	bl	80049b8 <_init>
 80038ac:	2600      	movs	r6, #0
 80038ae:	4d0a      	ldr	r5, [pc, #40]	; (80038d8 <__libc_init_array+0x40>)
 80038b0:	4c0a      	ldr	r4, [pc, #40]	; (80038dc <__libc_init_array+0x44>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08004b44 	.word	0x08004b44
 80038d4:	08004b44 	.word	0x08004b44
 80038d8:	08004b44 	.word	0x08004b44
 80038dc:	08004b48 	.word	0x08004b48

080038e0 <memset>:
 80038e0:	4603      	mov	r3, r0
 80038e2:	4402      	add	r2, r0
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d100      	bne.n	80038ea <memset+0xa>
 80038e8:	4770      	bx	lr
 80038ea:	f803 1b01 	strb.w	r1, [r3], #1
 80038ee:	e7f9      	b.n	80038e4 <memset+0x4>

080038f0 <strcpy>:
 80038f0:	4603      	mov	r3, r0
 80038f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038f6:	f803 2b01 	strb.w	r2, [r3], #1
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	d1f9      	bne.n	80038f2 <strcpy+0x2>
 80038fe:	4770      	bx	lr

08003900 <strtok>:
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <strtok+0x5c>)
 8003902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003906:	681f      	ldr	r7, [r3, #0]
 8003908:	4605      	mov	r5, r0
 800390a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800390c:	460e      	mov	r6, r1
 800390e:	b9ec      	cbnz	r4, 800394c <strtok+0x4c>
 8003910:	2050      	movs	r0, #80	; 0x50
 8003912:	f000 f881 	bl	8003a18 <malloc>
 8003916:	4602      	mov	r2, r0
 8003918:	65b8      	str	r0, [r7, #88]	; 0x58
 800391a:	b920      	cbnz	r0, 8003926 <strtok+0x26>
 800391c:	2157      	movs	r1, #87	; 0x57
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <strtok+0x60>)
 8003920:	4810      	ldr	r0, [pc, #64]	; (8003964 <strtok+0x64>)
 8003922:	f000 f849 	bl	80039b8 <__assert_func>
 8003926:	e9c0 4400 	strd	r4, r4, [r0]
 800392a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800392e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003932:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003936:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800393a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800393e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003942:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003946:	6184      	str	r4, [r0, #24]
 8003948:	7704      	strb	r4, [r0, #28]
 800394a:	6244      	str	r4, [r0, #36]	; 0x24
 800394c:	4631      	mov	r1, r6
 800394e:	4628      	mov	r0, r5
 8003950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003952:	2301      	movs	r3, #1
 8003954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	f000 b806 	b.w	8003968 <__strtok_r>
 800395c:	20000024 	.word	0x20000024
 8003960:	08004a00 	.word	0x08004a00
 8003964:	08004a17 	.word	0x08004a17

08003968 <__strtok_r>:
 8003968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396a:	b908      	cbnz	r0, 8003970 <__strtok_r+0x8>
 800396c:	6810      	ldr	r0, [r2, #0]
 800396e:	b188      	cbz	r0, 8003994 <__strtok_r+0x2c>
 8003970:	4604      	mov	r4, r0
 8003972:	460f      	mov	r7, r1
 8003974:	4620      	mov	r0, r4
 8003976:	f814 5b01 	ldrb.w	r5, [r4], #1
 800397a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800397e:	b91e      	cbnz	r6, 8003988 <__strtok_r+0x20>
 8003980:	b965      	cbnz	r5, 800399c <__strtok_r+0x34>
 8003982:	4628      	mov	r0, r5
 8003984:	6015      	str	r5, [r2, #0]
 8003986:	e005      	b.n	8003994 <__strtok_r+0x2c>
 8003988:	42b5      	cmp	r5, r6
 800398a:	d1f6      	bne.n	800397a <__strtok_r+0x12>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <__strtok_r+0xa>
 8003990:	6014      	str	r4, [r2, #0]
 8003992:	7003      	strb	r3, [r0, #0]
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003996:	461c      	mov	r4, r3
 8003998:	e00c      	b.n	80039b4 <__strtok_r+0x4c>
 800399a:	b915      	cbnz	r5, 80039a2 <__strtok_r+0x3a>
 800399c:	460e      	mov	r6, r1
 800399e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80039a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	d1f7      	bne.n	800399a <__strtok_r+0x32>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f3      	beq.n	8003996 <__strtok_r+0x2e>
 80039ae:	2300      	movs	r3, #0
 80039b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	e7ed      	b.n	8003994 <__strtok_r+0x2c>

080039b8 <__assert_func>:
 80039b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039ba:	4614      	mov	r4, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <__assert_func+0x2c>)
 80039c0:	4605      	mov	r5, r0
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d8      	ldr	r0, [r3, #12]
 80039c6:	b14c      	cbz	r4, 80039dc <__assert_func+0x24>
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <__assert_func+0x30>)
 80039ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80039ce:	9100      	str	r1, [sp, #0]
 80039d0:	462b      	mov	r3, r5
 80039d2:	4906      	ldr	r1, [pc, #24]	; (80039ec <__assert_func+0x34>)
 80039d4:	f000 f80e 	bl	80039f4 <fiprintf>
 80039d8:	f000 fcc0 	bl	800435c <abort>
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__assert_func+0x38>)
 80039de:	461c      	mov	r4, r3
 80039e0:	e7f3      	b.n	80039ca <__assert_func+0x12>
 80039e2:	bf00      	nop
 80039e4:	20000024 	.word	0x20000024
 80039e8:	08004a74 	.word	0x08004a74
 80039ec:	08004a81 	.word	0x08004a81
 80039f0:	08004aaf 	.word	0x08004aaf

080039f4 <fiprintf>:
 80039f4:	b40e      	push	{r1, r2, r3}
 80039f6:	b503      	push	{r0, r1, lr}
 80039f8:	4601      	mov	r1, r0
 80039fa:	ab03      	add	r3, sp, #12
 80039fc:	4805      	ldr	r0, [pc, #20]	; (8003a14 <fiprintf+0x20>)
 80039fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	f000 f913 	bl	8003c30 <_vfiprintf_r>
 8003a0a:	b002      	add	sp, #8
 8003a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a10:	b003      	add	sp, #12
 8003a12:	4770      	bx	lr
 8003a14:	20000024 	.word	0x20000024

08003a18 <malloc>:
 8003a18:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <malloc+0xc>)
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f000 b86b 	b.w	8003af8 <_malloc_r>
 8003a22:	bf00      	nop
 8003a24:	20000024 	.word	0x20000024

08003a28 <_free_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d040      	beq.n	8003ab2 <_free_r+0x8a>
 8003a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a34:	1f0c      	subs	r4, r1, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfb8      	it	lt
 8003a3a:	18e4      	addlt	r4, r4, r3
 8003a3c:	f000 fec0 	bl	80047c0 <__malloc_lock>
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <_free_r+0x8c>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	b933      	cbnz	r3, 8003a54 <_free_r+0x2c>
 8003a46:	6063      	str	r3, [r4, #4]
 8003a48:	6014      	str	r4, [r2, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a50:	f000 bebc 	b.w	80047cc <__malloc_unlock>
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d908      	bls.n	8003a6a <_free_r+0x42>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	1821      	adds	r1, r4, r0
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	bf01      	itttt	eq
 8003a60:	6819      	ldreq	r1, [r3, #0]
 8003a62:	685b      	ldreq	r3, [r3, #4]
 8003a64:	1809      	addeq	r1, r1, r0
 8003a66:	6021      	streq	r1, [r4, #0]
 8003a68:	e7ed      	b.n	8003a46 <_free_r+0x1e>
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b10b      	cbz	r3, 8003a74 <_free_r+0x4c>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d9fa      	bls.n	8003a6a <_free_r+0x42>
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	1850      	adds	r0, r2, r1
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d10b      	bne.n	8003a94 <_free_r+0x6c>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	4401      	add	r1, r0
 8003a80:	1850      	adds	r0, r2, r1
 8003a82:	4283      	cmp	r3, r0
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	d1e0      	bne.n	8003a4a <_free_r+0x22>
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4401      	add	r1, r0
 8003a8e:	6011      	str	r1, [r2, #0]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	e7da      	b.n	8003a4a <_free_r+0x22>
 8003a94:	d902      	bls.n	8003a9c <_free_r+0x74>
 8003a96:	230c      	movs	r3, #12
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	e7d6      	b.n	8003a4a <_free_r+0x22>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	1821      	adds	r1, r4, r0
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	bf01      	itttt	eq
 8003aa4:	6819      	ldreq	r1, [r3, #0]
 8003aa6:	685b      	ldreq	r3, [r3, #4]
 8003aa8:	1809      	addeq	r1, r1, r0
 8003aaa:	6021      	streq	r1, [r4, #0]
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	6054      	str	r4, [r2, #4]
 8003ab0:	e7cb      	b.n	8003a4a <_free_r+0x22>
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20001108 	.word	0x20001108

08003ab8 <sbrk_aligned>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4e0e      	ldr	r6, [pc, #56]	; (8003af4 <sbrk_aligned+0x3c>)
 8003abc:	460c      	mov	r4, r1
 8003abe:	6831      	ldr	r1, [r6, #0]
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	b911      	cbnz	r1, 8003aca <sbrk_aligned+0x12>
 8003ac4:	f000 fb7a 	bl	80041bc <_sbrk_r>
 8003ac8:	6030      	str	r0, [r6, #0]
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 fb75 	bl	80041bc <_sbrk_r>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	d00a      	beq.n	8003aec <sbrk_aligned+0x34>
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d007      	beq.n	8003af0 <sbrk_aligned+0x38>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fb6a 	bl	80041bc <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d101      	bne.n	8003af0 <sbrk_aligned+0x38>
 8003aec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	2000110c 	.word	0x2000110c

08003af8 <_malloc_r>:
 8003af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afc:	1ccd      	adds	r5, r1, #3
 8003afe:	f025 0503 	bic.w	r5, r5, #3
 8003b02:	3508      	adds	r5, #8
 8003b04:	2d0c      	cmp	r5, #12
 8003b06:	bf38      	it	cc
 8003b08:	250c      	movcc	r5, #12
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	4607      	mov	r7, r0
 8003b0e:	db01      	blt.n	8003b14 <_malloc_r+0x1c>
 8003b10:	42a9      	cmp	r1, r5
 8003b12:	d905      	bls.n	8003b20 <_malloc_r+0x28>
 8003b14:	230c      	movs	r3, #12
 8003b16:	2600      	movs	r6, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b20:	4e2e      	ldr	r6, [pc, #184]	; (8003bdc <_malloc_r+0xe4>)
 8003b22:	f000 fe4d 	bl	80047c0 <__malloc_lock>
 8003b26:	6833      	ldr	r3, [r6, #0]
 8003b28:	461c      	mov	r4, r3
 8003b2a:	bb34      	cbnz	r4, 8003b7a <_malloc_r+0x82>
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f7ff ffc2 	bl	8003ab8 <sbrk_aligned>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	4604      	mov	r4, r0
 8003b38:	d14d      	bne.n	8003bd6 <_malloc_r+0xde>
 8003b3a:	6834      	ldr	r4, [r6, #0]
 8003b3c:	4626      	mov	r6, r4
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d140      	bne.n	8003bc4 <_malloc_r+0xcc>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4631      	mov	r1, r6
 8003b46:	4638      	mov	r0, r7
 8003b48:	eb04 0803 	add.w	r8, r4, r3
 8003b4c:	f000 fb36 	bl	80041bc <_sbrk_r>
 8003b50:	4580      	cmp	r8, r0
 8003b52:	d13a      	bne.n	8003bca <_malloc_r+0xd2>
 8003b54:	6821      	ldr	r1, [r4, #0]
 8003b56:	3503      	adds	r5, #3
 8003b58:	1a6d      	subs	r5, r5, r1
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	4638      	mov	r0, r7
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7ff ffa5 	bl	8003ab8 <sbrk_aligned>
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d02b      	beq.n	8003bca <_malloc_r+0xd2>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	442b      	add	r3, r5
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e00e      	b.n	8003b98 <_malloc_r+0xa0>
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	1b52      	subs	r2, r2, r5
 8003b7e:	d41e      	bmi.n	8003bbe <_malloc_r+0xc6>
 8003b80:	2a0b      	cmp	r2, #11
 8003b82:	d916      	bls.n	8003bb2 <_malloc_r+0xba>
 8003b84:	1961      	adds	r1, r4, r5
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	6025      	str	r5, [r4, #0]
 8003b8a:	bf18      	it	ne
 8003b8c:	6059      	strne	r1, [r3, #4]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	bf08      	it	eq
 8003b92:	6031      	streq	r1, [r6, #0]
 8003b94:	5162      	str	r2, [r4, r5]
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f104 060b 	add.w	r6, r4, #11
 8003b9e:	f000 fe15 	bl	80047cc <__malloc_unlock>
 8003ba2:	f026 0607 	bic.w	r6, r6, #7
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	1af2      	subs	r2, r6, r3
 8003baa:	d0b6      	beq.n	8003b1a <_malloc_r+0x22>
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	50a3      	str	r3, [r4, r2]
 8003bb0:	e7b3      	b.n	8003b1a <_malloc_r+0x22>
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	bf0c      	ite	eq
 8003bb8:	6032      	streq	r2, [r6, #0]
 8003bba:	605a      	strne	r2, [r3, #4]
 8003bbc:	e7ec      	b.n	8003b98 <_malloc_r+0xa0>
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	6864      	ldr	r4, [r4, #4]
 8003bc2:	e7b2      	b.n	8003b2a <_malloc_r+0x32>
 8003bc4:	4634      	mov	r4, r6
 8003bc6:	6876      	ldr	r6, [r6, #4]
 8003bc8:	e7b9      	b.n	8003b3e <_malloc_r+0x46>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	4638      	mov	r0, r7
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	f000 fdfc 	bl	80047cc <__malloc_unlock>
 8003bd4:	e7a1      	b.n	8003b1a <_malloc_r+0x22>
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	e7de      	b.n	8003b98 <_malloc_r+0xa0>
 8003bda:	bf00      	nop
 8003bdc:	20001108 	.word	0x20001108

08003be0 <__sfputc_r>:
 8003be0:	6893      	ldr	r3, [r2, #8]
 8003be2:	b410      	push	{r4}
 8003be4:	3b01      	subs	r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	6093      	str	r3, [r2, #8]
 8003bea:	da07      	bge.n	8003bfc <__sfputc_r+0x1c>
 8003bec:	6994      	ldr	r4, [r2, #24]
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	db01      	blt.n	8003bf6 <__sfputc_r+0x16>
 8003bf2:	290a      	cmp	r1, #10
 8003bf4:	d102      	bne.n	8003bfc <__sfputc_r+0x1c>
 8003bf6:	bc10      	pop	{r4}
 8003bf8:	f000 baf0 	b.w	80041dc <__swbuf_r>
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	1c58      	adds	r0, r3, #1
 8003c00:	6010      	str	r0, [r2, #0]
 8003c02:	7019      	strb	r1, [r3, #0]
 8003c04:	4608      	mov	r0, r1
 8003c06:	bc10      	pop	{r4}
 8003c08:	4770      	bx	lr

08003c0a <__sfputs_r>:
 8003c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	460f      	mov	r7, r1
 8003c10:	4614      	mov	r4, r2
 8003c12:	18d5      	adds	r5, r2, r3
 8003c14:	42ac      	cmp	r4, r5
 8003c16:	d101      	bne.n	8003c1c <__sfputs_r+0x12>
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e007      	b.n	8003c2c <__sfputs_r+0x22>
 8003c1c:	463a      	mov	r2, r7
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c24:	f7ff ffdc 	bl	8003be0 <__sfputc_r>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d1f3      	bne.n	8003c14 <__sfputs_r+0xa>
 8003c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c30 <_vfiprintf_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	460d      	mov	r5, r1
 8003c36:	4614      	mov	r4, r2
 8003c38:	4698      	mov	r8, r3
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	b09d      	sub	sp, #116	; 0x74
 8003c3e:	b118      	cbz	r0, 8003c48 <_vfiprintf_r+0x18>
 8003c40:	6983      	ldr	r3, [r0, #24]
 8003c42:	b90b      	cbnz	r3, 8003c48 <_vfiprintf_r+0x18>
 8003c44:	f000 fca8 	bl	8004598 <__sinit>
 8003c48:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <_vfiprintf_r+0x240>)
 8003c4a:	429d      	cmp	r5, r3
 8003c4c:	d11b      	bne.n	8003c86 <_vfiprintf_r+0x56>
 8003c4e:	6875      	ldr	r5, [r6, #4]
 8003c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c52:	07d9      	lsls	r1, r3, #31
 8003c54:	d405      	bmi.n	8003c62 <_vfiprintf_r+0x32>
 8003c56:	89ab      	ldrh	r3, [r5, #12]
 8003c58:	059a      	lsls	r2, r3, #22
 8003c5a:	d402      	bmi.n	8003c62 <_vfiprintf_r+0x32>
 8003c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c5e:	f000 fd39 	bl	80046d4 <__retarget_lock_acquire_recursive>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	d501      	bpl.n	8003c6c <_vfiprintf_r+0x3c>
 8003c68:	692b      	ldr	r3, [r5, #16]
 8003c6a:	b9eb      	cbnz	r3, 8003ca8 <_vfiprintf_r+0x78>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4630      	mov	r0, r6
 8003c70:	f000 fb06 	bl	8004280 <__swsetup_r>
 8003c74:	b1c0      	cbz	r0, 8003ca8 <_vfiprintf_r+0x78>
 8003c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c78:	07dc      	lsls	r4, r3, #31
 8003c7a:	d50e      	bpl.n	8003c9a <_vfiprintf_r+0x6a>
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c80:	b01d      	add	sp, #116	; 0x74
 8003c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c86:	4b7b      	ldr	r3, [pc, #492]	; (8003e74 <_vfiprintf_r+0x244>)
 8003c88:	429d      	cmp	r5, r3
 8003c8a:	d101      	bne.n	8003c90 <_vfiprintf_r+0x60>
 8003c8c:	68b5      	ldr	r5, [r6, #8]
 8003c8e:	e7df      	b.n	8003c50 <_vfiprintf_r+0x20>
 8003c90:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <_vfiprintf_r+0x248>)
 8003c92:	429d      	cmp	r5, r3
 8003c94:	bf08      	it	eq
 8003c96:	68f5      	ldreq	r5, [r6, #12]
 8003c98:	e7da      	b.n	8003c50 <_vfiprintf_r+0x20>
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	0598      	lsls	r0, r3, #22
 8003c9e:	d4ed      	bmi.n	8003c7c <_vfiprintf_r+0x4c>
 8003ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca2:	f000 fd18 	bl	80046d6 <__retarget_lock_release_recursive>
 8003ca6:	e7e9      	b.n	8003c7c <_vfiprintf_r+0x4c>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cac:	2320      	movs	r3, #32
 8003cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cb2:	2330      	movs	r3, #48	; 0x30
 8003cb4:	f04f 0901 	mov.w	r9, #1
 8003cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003e7c <_vfiprintf_r+0x24c>
 8003cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	469a      	mov	sl, r3
 8003cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_vfiprintf_r+0xa2>
 8003cce:	2a25      	cmp	r2, #37	; 0x25
 8003cd0:	d1f9      	bne.n	8003cc6 <_vfiprintf_r+0x96>
 8003cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003cd6:	d00b      	beq.n	8003cf0 <_vfiprintf_r+0xc0>
 8003cd8:	465b      	mov	r3, fp
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ff93 	bl	8003c0a <__sfputs_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f000 80aa 	beq.w	8003e3e <_vfiprintf_r+0x20e>
 8003cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cec:	445a      	add	r2, fp
 8003cee:	9209      	str	r2, [sp, #36]	; 0x24
 8003cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a2 	beq.w	8003e3e <_vfiprintf_r+0x20e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d04:	f10a 0a01 	add.w	sl, sl, #1
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	9307      	str	r3, [sp, #28]
 8003d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d10:	931a      	str	r3, [sp, #104]	; 0x68
 8003d12:	4654      	mov	r4, sl
 8003d14:	2205      	movs	r2, #5
 8003d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d1a:	4858      	ldr	r0, [pc, #352]	; (8003e7c <_vfiprintf_r+0x24c>)
 8003d1c:	f000 fd42 	bl	80047a4 <memchr>
 8003d20:	9a04      	ldr	r2, [sp, #16]
 8003d22:	b9d8      	cbnz	r0, 8003d5c <_vfiprintf_r+0x12c>
 8003d24:	06d1      	lsls	r1, r2, #27
 8003d26:	bf44      	itt	mi
 8003d28:	2320      	movmi	r3, #32
 8003d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d2e:	0713      	lsls	r3, r2, #28
 8003d30:	bf44      	itt	mi
 8003d32:	232b      	movmi	r3, #43	; 0x2b
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d38:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3e:	d015      	beq.n	8003d6c <_vfiprintf_r+0x13c>
 8003d40:	4654      	mov	r4, sl
 8003d42:	2000      	movs	r0, #0
 8003d44:	f04f 0c0a 	mov.w	ip, #10
 8003d48:	9a07      	ldr	r2, [sp, #28]
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d50:	3b30      	subs	r3, #48	; 0x30
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d94e      	bls.n	8003df4 <_vfiprintf_r+0x1c4>
 8003d56:	b1b0      	cbz	r0, 8003d86 <_vfiprintf_r+0x156>
 8003d58:	9207      	str	r2, [sp, #28]
 8003d5a:	e014      	b.n	8003d86 <_vfiprintf_r+0x156>
 8003d5c:	eba0 0308 	sub.w	r3, r0, r8
 8003d60:	fa09 f303 	lsl.w	r3, r9, r3
 8003d64:	4313      	orrs	r3, r2
 8003d66:	46a2      	mov	sl, r4
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	e7d2      	b.n	8003d12 <_vfiprintf_r+0xe2>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	1d19      	adds	r1, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	9103      	str	r1, [sp, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfbb      	ittet	lt
 8003d78:	425b      	neglt	r3, r3
 8003d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d7e:	9307      	strge	r3, [sp, #28]
 8003d80:	9307      	strlt	r3, [sp, #28]
 8003d82:	bfb8      	it	lt
 8003d84:	9204      	strlt	r2, [sp, #16]
 8003d86:	7823      	ldrb	r3, [r4, #0]
 8003d88:	2b2e      	cmp	r3, #46	; 0x2e
 8003d8a:	d10c      	bne.n	8003da6 <_vfiprintf_r+0x176>
 8003d8c:	7863      	ldrb	r3, [r4, #1]
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	d135      	bne.n	8003dfe <_vfiprintf_r+0x1ce>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	3402      	adds	r4, #2
 8003d96:	1d1a      	adds	r2, r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	9203      	str	r2, [sp, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bfb8      	it	lt
 8003da0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003da4:	9305      	str	r3, [sp, #20]
 8003da6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003e80 <_vfiprintf_r+0x250>
 8003daa:	2203      	movs	r2, #3
 8003dac:	4650      	mov	r0, sl
 8003dae:	7821      	ldrb	r1, [r4, #0]
 8003db0:	f000 fcf8 	bl	80047a4 <memchr>
 8003db4:	b140      	cbz	r0, 8003dc8 <_vfiprintf_r+0x198>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	eba0 000a 	sub.w	r0, r0, sl
 8003dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	3401      	adds	r4, #1
 8003dc4:	4303      	orrs	r3, r0
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	2206      	movs	r2, #6
 8003dce:	482d      	ldr	r0, [pc, #180]	; (8003e84 <_vfiprintf_r+0x254>)
 8003dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dd4:	f000 fce6 	bl	80047a4 <memchr>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d03f      	beq.n	8003e5c <_vfiprintf_r+0x22c>
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <_vfiprintf_r+0x258>)
 8003dde:	bb1b      	cbnz	r3, 8003e28 <_vfiprintf_r+0x1f8>
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	3307      	adds	r3, #7
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	3308      	adds	r3, #8
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dee:	443b      	add	r3, r7
 8003df0:	9309      	str	r3, [sp, #36]	; 0x24
 8003df2:	e767      	b.n	8003cc4 <_vfiprintf_r+0x94>
 8003df4:	460c      	mov	r4, r1
 8003df6:	2001      	movs	r0, #1
 8003df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dfc:	e7a5      	b.n	8003d4a <_vfiprintf_r+0x11a>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f04f 0c0a 	mov.w	ip, #10
 8003e04:	4619      	mov	r1, r3
 8003e06:	3401      	adds	r4, #1
 8003e08:	9305      	str	r3, [sp, #20]
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e10:	3a30      	subs	r2, #48	; 0x30
 8003e12:	2a09      	cmp	r2, #9
 8003e14:	d903      	bls.n	8003e1e <_vfiprintf_r+0x1ee>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0c5      	beq.n	8003da6 <_vfiprintf_r+0x176>
 8003e1a:	9105      	str	r1, [sp, #20]
 8003e1c:	e7c3      	b.n	8003da6 <_vfiprintf_r+0x176>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	2301      	movs	r3, #1
 8003e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e26:	e7f0      	b.n	8003e0a <_vfiprintf_r+0x1da>
 8003e28:	ab03      	add	r3, sp, #12
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	4630      	mov	r0, r6
 8003e30:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <_vfiprintf_r+0x25c>)
 8003e32:	a904      	add	r1, sp, #16
 8003e34:	f3af 8000 	nop.w
 8003e38:	4607      	mov	r7, r0
 8003e3a:	1c78      	adds	r0, r7, #1
 8003e3c:	d1d6      	bne.n	8003dec <_vfiprintf_r+0x1bc>
 8003e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e40:	07d9      	lsls	r1, r3, #31
 8003e42:	d405      	bmi.n	8003e50 <_vfiprintf_r+0x220>
 8003e44:	89ab      	ldrh	r3, [r5, #12]
 8003e46:	059a      	lsls	r2, r3, #22
 8003e48:	d402      	bmi.n	8003e50 <_vfiprintf_r+0x220>
 8003e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e4c:	f000 fc43 	bl	80046d6 <__retarget_lock_release_recursive>
 8003e50:	89ab      	ldrh	r3, [r5, #12]
 8003e52:	065b      	lsls	r3, r3, #25
 8003e54:	f53f af12 	bmi.w	8003c7c <_vfiprintf_r+0x4c>
 8003e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5a:	e711      	b.n	8003c80 <_vfiprintf_r+0x50>
 8003e5c:	ab03      	add	r3, sp, #12
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	462a      	mov	r2, r5
 8003e62:	4630      	mov	r0, r6
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <_vfiprintf_r+0x25c>)
 8003e66:	a904      	add	r1, sp, #16
 8003e68:	f000 f882 	bl	8003f70 <_printf_i>
 8003e6c:	e7e4      	b.n	8003e38 <_vfiprintf_r+0x208>
 8003e6e:	bf00      	nop
 8003e70:	08004b04 	.word	0x08004b04
 8003e74:	08004b24 	.word	0x08004b24
 8003e78:	08004ae4 	.word	0x08004ae4
 8003e7c:	08004ab0 	.word	0x08004ab0
 8003e80:	08004ab6 	.word	0x08004ab6
 8003e84:	08004aba 	.word	0x08004aba
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	08003c0b 	.word	0x08003c0b

08003e90 <_printf_common>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	4616      	mov	r6, r2
 8003e96:	4699      	mov	r9, r3
 8003e98:	688a      	ldr	r2, [r1, #8]
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bfb8      	it	lt
 8003ea2:	4613      	movlt	r3, r2
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eaa:	460c      	mov	r4, r1
 8003eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eb0:	b10a      	cbz	r2, 8003eb6 <_printf_common+0x26>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	6833      	ldrmi	r3, [r6, #0]
 8003ebe:	3302      	addmi	r3, #2
 8003ec0:	6033      	strmi	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d106      	bne.n	8003ed8 <_printf_common+0x48>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dc28      	bgt.n	8003f2a <_printf_common+0x9a>
 8003ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003edc:	1e13      	subs	r3, r2, #0
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	bf18      	it	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	0692      	lsls	r2, r2, #26
 8003ee6:	d42d      	bmi.n	8003f44 <_printf_common+0xb4>
 8003ee8:	4649      	mov	r1, r9
 8003eea:	4638      	mov	r0, r7
 8003eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef0:	47c0      	blx	r8
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d020      	beq.n	8003f38 <_printf_common+0xa8>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	68e5      	ldr	r5, [r4, #12]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	bf18      	it	ne
 8003f02:	2500      	movne	r5, #0
 8003f04:	6832      	ldr	r2, [r6, #0]
 8003f06:	f04f 0600 	mov.w	r6, #0
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	bf08      	it	eq
 8003f0e:	1aad      	subeq	r5, r5, r2
 8003f10:	6922      	ldr	r2, [r4, #16]
 8003f12:	bf08      	it	eq
 8003f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfc4      	itt	gt
 8003f1c:	1a9b      	subgt	r3, r3, r2
 8003f1e:	18ed      	addgt	r5, r5, r3
 8003f20:	341a      	adds	r4, #26
 8003f22:	42b5      	cmp	r5, r6
 8003f24:	d11a      	bne.n	8003f5c <_printf_common+0xcc>
 8003f26:	2000      	movs	r0, #0
 8003f28:	e008      	b.n	8003f3c <_printf_common+0xac>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4649      	mov	r1, r9
 8003f30:	4638      	mov	r0, r7
 8003f32:	47c0      	blx	r8
 8003f34:	3001      	adds	r0, #1
 8003f36:	d103      	bne.n	8003f40 <_printf_common+0xb0>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f40:	3501      	adds	r5, #1
 8003f42:	e7c4      	b.n	8003ece <_printf_common+0x3e>
 8003f44:	2030      	movs	r0, #48	; 0x30
 8003f46:	18e1      	adds	r1, r4, r3
 8003f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f52:	4422      	add	r2, r4
 8003f54:	3302      	adds	r3, #2
 8003f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f5a:	e7c5      	b.n	8003ee8 <_printf_common+0x58>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4649      	mov	r1, r9
 8003f62:	4638      	mov	r0, r7
 8003f64:	47c0      	blx	r8
 8003f66:	3001      	adds	r0, #1
 8003f68:	d0e6      	beq.n	8003f38 <_printf_common+0xa8>
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7d9      	b.n	8003f22 <_printf_common+0x92>
	...

08003f70 <_printf_i>:
 8003f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f74:	7e0f      	ldrb	r7, [r1, #24]
 8003f76:	4691      	mov	r9, r2
 8003f78:	2f78      	cmp	r7, #120	; 0x78
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	469a      	mov	sl, r3
 8003f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f86:	d807      	bhi.n	8003f98 <_printf_i+0x28>
 8003f88:	2f62      	cmp	r7, #98	; 0x62
 8003f8a:	d80a      	bhi.n	8003fa2 <_printf_i+0x32>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	f000 80d9 	beq.w	8004144 <_printf_i+0x1d4>
 8003f92:	2f58      	cmp	r7, #88	; 0x58
 8003f94:	f000 80a4 	beq.w	80040e0 <_printf_i+0x170>
 8003f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fa0:	e03a      	b.n	8004018 <_printf_i+0xa8>
 8003fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fa6:	2b15      	cmp	r3, #21
 8003fa8:	d8f6      	bhi.n	8003f98 <_printf_i+0x28>
 8003faa:	a101      	add	r1, pc, #4	; (adr r1, 8003fb0 <_printf_i+0x40>)
 8003fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	0800401d 	.word	0x0800401d
 8003fb8:	08003f99 	.word	0x08003f99
 8003fbc:	08003f99 	.word	0x08003f99
 8003fc0:	08003f99 	.word	0x08003f99
 8003fc4:	08003f99 	.word	0x08003f99
 8003fc8:	0800401d 	.word	0x0800401d
 8003fcc:	08003f99 	.word	0x08003f99
 8003fd0:	08003f99 	.word	0x08003f99
 8003fd4:	08003f99 	.word	0x08003f99
 8003fd8:	08003f99 	.word	0x08003f99
 8003fdc:	0800412b 	.word	0x0800412b
 8003fe0:	0800404d 	.word	0x0800404d
 8003fe4:	0800410d 	.word	0x0800410d
 8003fe8:	08003f99 	.word	0x08003f99
 8003fec:	08003f99 	.word	0x08003f99
 8003ff0:	0800414d 	.word	0x0800414d
 8003ff4:	08003f99 	.word	0x08003f99
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	08003f99 	.word	0x08003f99
 8004000:	08003f99 	.word	0x08003f99
 8004004:	08004115 	.word	0x08004115
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	602a      	str	r2, [r5, #0]
 8004010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004018:	2301      	movs	r3, #1
 800401a:	e0a4      	b.n	8004166 <_printf_i+0x1f6>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	6829      	ldr	r1, [r5, #0]
 8004020:	0606      	lsls	r6, r0, #24
 8004022:	f101 0304 	add.w	r3, r1, #4
 8004026:	d50a      	bpl.n	800403e <_printf_i+0xce>
 8004028:	680e      	ldr	r6, [r1, #0]
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	2e00      	cmp	r6, #0
 800402e:	da03      	bge.n	8004038 <_printf_i+0xc8>
 8004030:	232d      	movs	r3, #45	; 0x2d
 8004032:	4276      	negs	r6, r6
 8004034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004038:	230a      	movs	r3, #10
 800403a:	485e      	ldr	r0, [pc, #376]	; (80041b4 <_printf_i+0x244>)
 800403c:	e019      	b.n	8004072 <_printf_i+0x102>
 800403e:	680e      	ldr	r6, [r1, #0]
 8004040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004044:	602b      	str	r3, [r5, #0]
 8004046:	bf18      	it	ne
 8004048:	b236      	sxthne	r6, r6
 800404a:	e7ef      	b.n	800402c <_printf_i+0xbc>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	6820      	ldr	r0, [r4, #0]
 8004050:	1d19      	adds	r1, r3, #4
 8004052:	6029      	str	r1, [r5, #0]
 8004054:	0601      	lsls	r1, r0, #24
 8004056:	d501      	bpl.n	800405c <_printf_i+0xec>
 8004058:	681e      	ldr	r6, [r3, #0]
 800405a:	e002      	b.n	8004062 <_printf_i+0xf2>
 800405c:	0646      	lsls	r6, r0, #25
 800405e:	d5fb      	bpl.n	8004058 <_printf_i+0xe8>
 8004060:	881e      	ldrh	r6, [r3, #0]
 8004062:	2f6f      	cmp	r7, #111	; 0x6f
 8004064:	bf0c      	ite	eq
 8004066:	2308      	moveq	r3, #8
 8004068:	230a      	movne	r3, #10
 800406a:	4852      	ldr	r0, [pc, #328]	; (80041b4 <_printf_i+0x244>)
 800406c:	2100      	movs	r1, #0
 800406e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004072:	6865      	ldr	r5, [r4, #4]
 8004074:	2d00      	cmp	r5, #0
 8004076:	bfa8      	it	ge
 8004078:	6821      	ldrge	r1, [r4, #0]
 800407a:	60a5      	str	r5, [r4, #8]
 800407c:	bfa4      	itt	ge
 800407e:	f021 0104 	bicge.w	r1, r1, #4
 8004082:	6021      	strge	r1, [r4, #0]
 8004084:	b90e      	cbnz	r6, 800408a <_printf_i+0x11a>
 8004086:	2d00      	cmp	r5, #0
 8004088:	d04d      	beq.n	8004126 <_printf_i+0x1b6>
 800408a:	4615      	mov	r5, r2
 800408c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004090:	fb03 6711 	mls	r7, r3, r1, r6
 8004094:	5dc7      	ldrb	r7, [r0, r7]
 8004096:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800409a:	4637      	mov	r7, r6
 800409c:	42bb      	cmp	r3, r7
 800409e:	460e      	mov	r6, r1
 80040a0:	d9f4      	bls.n	800408c <_printf_i+0x11c>
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d10b      	bne.n	80040be <_printf_i+0x14e>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	07de      	lsls	r6, r3, #31
 80040aa:	d508      	bpl.n	80040be <_printf_i+0x14e>
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	6861      	ldr	r1, [r4, #4]
 80040b0:	4299      	cmp	r1, r3
 80040b2:	bfde      	ittt	le
 80040b4:	2330      	movle	r3, #48	; 0x30
 80040b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040be:	1b52      	subs	r2, r2, r5
 80040c0:	6122      	str	r2, [r4, #16]
 80040c2:	464b      	mov	r3, r9
 80040c4:	4621      	mov	r1, r4
 80040c6:	4640      	mov	r0, r8
 80040c8:	f8cd a000 	str.w	sl, [sp]
 80040cc:	aa03      	add	r2, sp, #12
 80040ce:	f7ff fedf 	bl	8003e90 <_printf_common>
 80040d2:	3001      	adds	r0, #1
 80040d4:	d14c      	bne.n	8004170 <_printf_i+0x200>
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040da:	b004      	add	sp, #16
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	4834      	ldr	r0, [pc, #208]	; (80041b4 <_printf_i+0x244>)
 80040e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040e6:	6829      	ldr	r1, [r5, #0]
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ee:	6029      	str	r1, [r5, #0]
 80040f0:	061d      	lsls	r5, r3, #24
 80040f2:	d514      	bpl.n	800411e <_printf_i+0x1ae>
 80040f4:	07df      	lsls	r7, r3, #31
 80040f6:	bf44      	itt	mi
 80040f8:	f043 0320 	orrmi.w	r3, r3, #32
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b91e      	cbnz	r6, 8004108 <_printf_i+0x198>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2310      	movs	r3, #16
 800410a:	e7af      	b.n	800406c <_printf_i+0xfc>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	f043 0320 	orr.w	r3, r3, #32
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	2378      	movs	r3, #120	; 0x78
 8004116:	4828      	ldr	r0, [pc, #160]	; (80041b8 <_printf_i+0x248>)
 8004118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800411c:	e7e3      	b.n	80040e6 <_printf_i+0x176>
 800411e:	0659      	lsls	r1, r3, #25
 8004120:	bf48      	it	mi
 8004122:	b2b6      	uxthmi	r6, r6
 8004124:	e7e6      	b.n	80040f4 <_printf_i+0x184>
 8004126:	4615      	mov	r5, r2
 8004128:	e7bb      	b.n	80040a2 <_printf_i+0x132>
 800412a:	682b      	ldr	r3, [r5, #0]
 800412c:	6826      	ldr	r6, [r4, #0]
 800412e:	1d18      	adds	r0, r3, #4
 8004130:	6961      	ldr	r1, [r4, #20]
 8004132:	6028      	str	r0, [r5, #0]
 8004134:	0635      	lsls	r5, r6, #24
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	d501      	bpl.n	800413e <_printf_i+0x1ce>
 800413a:	6019      	str	r1, [r3, #0]
 800413c:	e002      	b.n	8004144 <_printf_i+0x1d4>
 800413e:	0670      	lsls	r0, r6, #25
 8004140:	d5fb      	bpl.n	800413a <_printf_i+0x1ca>
 8004142:	8019      	strh	r1, [r3, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	4615      	mov	r5, r2
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	e7ba      	b.n	80040c2 <_printf_i+0x152>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	2100      	movs	r1, #0
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	4628      	mov	r0, r5
 800415a:	f000 fb23 	bl	80047a4 <memchr>
 800415e:	b108      	cbz	r0, 8004164 <_printf_i+0x1f4>
 8004160:	1b40      	subs	r0, r0, r5
 8004162:	6060      	str	r0, [r4, #4]
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	2300      	movs	r3, #0
 800416a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416e:	e7a8      	b.n	80040c2 <_printf_i+0x152>
 8004170:	462a      	mov	r2, r5
 8004172:	4649      	mov	r1, r9
 8004174:	4640      	mov	r0, r8
 8004176:	6923      	ldr	r3, [r4, #16]
 8004178:	47d0      	blx	sl
 800417a:	3001      	adds	r0, #1
 800417c:	d0ab      	beq.n	80040d6 <_printf_i+0x166>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	079b      	lsls	r3, r3, #30
 8004182:	d413      	bmi.n	80041ac <_printf_i+0x23c>
 8004184:	68e0      	ldr	r0, [r4, #12]
 8004186:	9b03      	ldr	r3, [sp, #12]
 8004188:	4298      	cmp	r0, r3
 800418a:	bfb8      	it	lt
 800418c:	4618      	movlt	r0, r3
 800418e:	e7a4      	b.n	80040da <_printf_i+0x16a>
 8004190:	2301      	movs	r3, #1
 8004192:	4632      	mov	r2, r6
 8004194:	4649      	mov	r1, r9
 8004196:	4640      	mov	r0, r8
 8004198:	47d0      	blx	sl
 800419a:	3001      	adds	r0, #1
 800419c:	d09b      	beq.n	80040d6 <_printf_i+0x166>
 800419e:	3501      	adds	r5, #1
 80041a0:	68e3      	ldr	r3, [r4, #12]
 80041a2:	9903      	ldr	r1, [sp, #12]
 80041a4:	1a5b      	subs	r3, r3, r1
 80041a6:	42ab      	cmp	r3, r5
 80041a8:	dcf2      	bgt.n	8004190 <_printf_i+0x220>
 80041aa:	e7eb      	b.n	8004184 <_printf_i+0x214>
 80041ac:	2500      	movs	r5, #0
 80041ae:	f104 0619 	add.w	r6, r4, #25
 80041b2:	e7f5      	b.n	80041a0 <_printf_i+0x230>
 80041b4:	08004ac1 	.word	0x08004ac1
 80041b8:	08004ad2 	.word	0x08004ad2

080041bc <_sbrk_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	2300      	movs	r3, #0
 80041c0:	4d05      	ldr	r5, [pc, #20]	; (80041d8 <_sbrk_r+0x1c>)
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f7fd fab8 	bl	800173c <_sbrk>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_sbrk_r+0x1a>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_sbrk_r+0x1a>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	20001114 	.word	0x20001114

080041dc <__swbuf_r>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	460e      	mov	r6, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	4605      	mov	r5, r0
 80041e4:	b118      	cbz	r0, 80041ee <__swbuf_r+0x12>
 80041e6:	6983      	ldr	r3, [r0, #24]
 80041e8:	b90b      	cbnz	r3, 80041ee <__swbuf_r+0x12>
 80041ea:	f000 f9d5 	bl	8004598 <__sinit>
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <__swbuf_r+0x98>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	d12b      	bne.n	800424c <__swbuf_r+0x70>
 80041f4:	686c      	ldr	r4, [r5, #4]
 80041f6:	69a3      	ldr	r3, [r4, #24]
 80041f8:	60a3      	str	r3, [r4, #8]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	071a      	lsls	r2, r3, #28
 80041fe:	d52f      	bpl.n	8004260 <__swbuf_r+0x84>
 8004200:	6923      	ldr	r3, [r4, #16]
 8004202:	b36b      	cbz	r3, 8004260 <__swbuf_r+0x84>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	b2f6      	uxtb	r6, r6
 800420a:	1ac0      	subs	r0, r0, r3
 800420c:	6963      	ldr	r3, [r4, #20]
 800420e:	4637      	mov	r7, r6
 8004210:	4283      	cmp	r3, r0
 8004212:	dc04      	bgt.n	800421e <__swbuf_r+0x42>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f000 f92a 	bl	8004470 <_fflush_r>
 800421c:	bb30      	cbnz	r0, 800426c <__swbuf_r+0x90>
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	3001      	adds	r0, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	701e      	strb	r6, [r3, #0]
 800422e:	6963      	ldr	r3, [r4, #20]
 8004230:	4283      	cmp	r3, r0
 8004232:	d004      	beq.n	800423e <__swbuf_r+0x62>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	07db      	lsls	r3, r3, #31
 8004238:	d506      	bpl.n	8004248 <__swbuf_r+0x6c>
 800423a:	2e0a      	cmp	r6, #10
 800423c:	d104      	bne.n	8004248 <__swbuf_r+0x6c>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f915 	bl	8004470 <_fflush_r>
 8004246:	b988      	cbnz	r0, 800426c <__swbuf_r+0x90>
 8004248:	4638      	mov	r0, r7
 800424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <__swbuf_r+0x9c>)
 800424e:	429c      	cmp	r4, r3
 8004250:	d101      	bne.n	8004256 <__swbuf_r+0x7a>
 8004252:	68ac      	ldr	r4, [r5, #8]
 8004254:	e7cf      	b.n	80041f6 <__swbuf_r+0x1a>
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <__swbuf_r+0xa0>)
 8004258:	429c      	cmp	r4, r3
 800425a:	bf08      	it	eq
 800425c:	68ec      	ldreq	r4, [r5, #12]
 800425e:	e7ca      	b.n	80041f6 <__swbuf_r+0x1a>
 8004260:	4621      	mov	r1, r4
 8004262:	4628      	mov	r0, r5
 8004264:	f000 f80c 	bl	8004280 <__swsetup_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	d0cb      	beq.n	8004204 <__swbuf_r+0x28>
 800426c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004270:	e7ea      	b.n	8004248 <__swbuf_r+0x6c>
 8004272:	bf00      	nop
 8004274:	08004b04 	.word	0x08004b04
 8004278:	08004b24 	.word	0x08004b24
 800427c:	08004ae4 	.word	0x08004ae4

08004280 <__swsetup_r>:
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <__swsetup_r+0xcc>)
 8004282:	b570      	push	{r4, r5, r6, lr}
 8004284:	681d      	ldr	r5, [r3, #0]
 8004286:	4606      	mov	r6, r0
 8004288:	460c      	mov	r4, r1
 800428a:	b125      	cbz	r5, 8004296 <__swsetup_r+0x16>
 800428c:	69ab      	ldr	r3, [r5, #24]
 800428e:	b913      	cbnz	r3, 8004296 <__swsetup_r+0x16>
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f981 	bl	8004598 <__sinit>
 8004296:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <__swsetup_r+0xd0>)
 8004298:	429c      	cmp	r4, r3
 800429a:	d10f      	bne.n	80042bc <__swsetup_r+0x3c>
 800429c:	686c      	ldr	r4, [r5, #4]
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042a4:	0719      	lsls	r1, r3, #28
 80042a6:	d42c      	bmi.n	8004302 <__swsetup_r+0x82>
 80042a8:	06dd      	lsls	r5, r3, #27
 80042aa:	d411      	bmi.n	80042d0 <__swsetup_r+0x50>
 80042ac:	2309      	movs	r3, #9
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b8:	81a3      	strh	r3, [r4, #12]
 80042ba:	e03e      	b.n	800433a <__swsetup_r+0xba>
 80042bc:	4b25      	ldr	r3, [pc, #148]	; (8004354 <__swsetup_r+0xd4>)
 80042be:	429c      	cmp	r4, r3
 80042c0:	d101      	bne.n	80042c6 <__swsetup_r+0x46>
 80042c2:	68ac      	ldr	r4, [r5, #8]
 80042c4:	e7eb      	b.n	800429e <__swsetup_r+0x1e>
 80042c6:	4b24      	ldr	r3, [pc, #144]	; (8004358 <__swsetup_r+0xd8>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	bf08      	it	eq
 80042cc:	68ec      	ldreq	r4, [r5, #12]
 80042ce:	e7e6      	b.n	800429e <__swsetup_r+0x1e>
 80042d0:	0758      	lsls	r0, r3, #29
 80042d2:	d512      	bpl.n	80042fa <__swsetup_r+0x7a>
 80042d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042d6:	b141      	cbz	r1, 80042ea <__swsetup_r+0x6a>
 80042d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042dc:	4299      	cmp	r1, r3
 80042de:	d002      	beq.n	80042e6 <__swsetup_r+0x66>
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7ff fba1 	bl	8003a28 <_free_r>
 80042e6:	2300      	movs	r3, #0
 80042e8:	6363      	str	r3, [r4, #52]	; 0x34
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	2300      	movs	r3, #0
 80042f4:	6063      	str	r3, [r4, #4]
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	b94b      	cbnz	r3, 800431a <__swsetup_r+0x9a>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d003      	beq.n	800431a <__swsetup_r+0x9a>
 8004312:	4621      	mov	r1, r4
 8004314:	4630      	mov	r0, r6
 8004316:	f000 fa05 	bl	8004724 <__smakebuf_r>
 800431a:	89a0      	ldrh	r0, [r4, #12]
 800431c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004320:	f010 0301 	ands.w	r3, r0, #1
 8004324:	d00a      	beq.n	800433c <__swsetup_r+0xbc>
 8004326:	2300      	movs	r3, #0
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	6963      	ldr	r3, [r4, #20]
 800432c:	425b      	negs	r3, r3
 800432e:	61a3      	str	r3, [r4, #24]
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	b943      	cbnz	r3, 8004346 <__swsetup_r+0xc6>
 8004334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004338:	d1ba      	bne.n	80042b0 <__swsetup_r+0x30>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	0781      	lsls	r1, r0, #30
 800433e:	bf58      	it	pl
 8004340:	6963      	ldrpl	r3, [r4, #20]
 8004342:	60a3      	str	r3, [r4, #8]
 8004344:	e7f4      	b.n	8004330 <__swsetup_r+0xb0>
 8004346:	2000      	movs	r0, #0
 8004348:	e7f7      	b.n	800433a <__swsetup_r+0xba>
 800434a:	bf00      	nop
 800434c:	20000024 	.word	0x20000024
 8004350:	08004b04 	.word	0x08004b04
 8004354:	08004b24 	.word	0x08004b24
 8004358:	08004ae4 	.word	0x08004ae4

0800435c <abort>:
 800435c:	2006      	movs	r0, #6
 800435e:	b508      	push	{r3, lr}
 8004360:	f000 fa62 	bl	8004828 <raise>
 8004364:	2001      	movs	r0, #1
 8004366:	f7fd f976 	bl	8001656 <_exit>
	...

0800436c <__sflush_r>:
 800436c:	898a      	ldrh	r2, [r1, #12]
 800436e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004370:	4605      	mov	r5, r0
 8004372:	0710      	lsls	r0, r2, #28
 8004374:	460c      	mov	r4, r1
 8004376:	d457      	bmi.n	8004428 <__sflush_r+0xbc>
 8004378:	684b      	ldr	r3, [r1, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	dc04      	bgt.n	8004388 <__sflush_r+0x1c>
 800437e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc01      	bgt.n	8004388 <__sflush_r+0x1c>
 8004384:	2000      	movs	r0, #0
 8004386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800438a:	2e00      	cmp	r6, #0
 800438c:	d0fa      	beq.n	8004384 <__sflush_r+0x18>
 800438e:	2300      	movs	r3, #0
 8004390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004394:	682f      	ldr	r7, [r5, #0]
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	d032      	beq.n	8004400 <__sflush_r+0x94>
 800439a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	075a      	lsls	r2, r3, #29
 80043a0:	d505      	bpl.n	80043ae <__sflush_r+0x42>
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	1ac0      	subs	r0, r0, r3
 80043a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043a8:	b10b      	cbz	r3, 80043ae <__sflush_r+0x42>
 80043aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ac:	1ac0      	subs	r0, r0, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	4602      	mov	r2, r0
 80043b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b4:	4628      	mov	r0, r5
 80043b6:	6a21      	ldr	r1, [r4, #32]
 80043b8:	47b0      	blx	r6
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	d106      	bne.n	80043ce <__sflush_r+0x62>
 80043c0:	6829      	ldr	r1, [r5, #0]
 80043c2:	291d      	cmp	r1, #29
 80043c4:	d82c      	bhi.n	8004420 <__sflush_r+0xb4>
 80043c6:	4a29      	ldr	r2, [pc, #164]	; (800446c <__sflush_r+0x100>)
 80043c8:	40ca      	lsrs	r2, r1
 80043ca:	07d6      	lsls	r6, r2, #31
 80043cc:	d528      	bpl.n	8004420 <__sflush_r+0xb4>
 80043ce:	2200      	movs	r2, #0
 80043d0:	6062      	str	r2, [r4, #4]
 80043d2:	6922      	ldr	r2, [r4, #16]
 80043d4:	04d9      	lsls	r1, r3, #19
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	d504      	bpl.n	80043e4 <__sflush_r+0x78>
 80043da:	1c42      	adds	r2, r0, #1
 80043dc:	d101      	bne.n	80043e2 <__sflush_r+0x76>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	b903      	cbnz	r3, 80043e4 <__sflush_r+0x78>
 80043e2:	6560      	str	r0, [r4, #84]	; 0x54
 80043e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e6:	602f      	str	r7, [r5, #0]
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d0cb      	beq.n	8004384 <__sflush_r+0x18>
 80043ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f0:	4299      	cmp	r1, r3
 80043f2:	d002      	beq.n	80043fa <__sflush_r+0x8e>
 80043f4:	4628      	mov	r0, r5
 80043f6:	f7ff fb17 	bl	8003a28 <_free_r>
 80043fa:	2000      	movs	r0, #0
 80043fc:	6360      	str	r0, [r4, #52]	; 0x34
 80043fe:	e7c2      	b.n	8004386 <__sflush_r+0x1a>
 8004400:	6a21      	ldr	r1, [r4, #32]
 8004402:	2301      	movs	r3, #1
 8004404:	4628      	mov	r0, r5
 8004406:	47b0      	blx	r6
 8004408:	1c41      	adds	r1, r0, #1
 800440a:	d1c7      	bne.n	800439c <__sflush_r+0x30>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0c4      	beq.n	800439c <__sflush_r+0x30>
 8004412:	2b1d      	cmp	r3, #29
 8004414:	d001      	beq.n	800441a <__sflush_r+0xae>
 8004416:	2b16      	cmp	r3, #22
 8004418:	d101      	bne.n	800441e <__sflush_r+0xb2>
 800441a:	602f      	str	r7, [r5, #0]
 800441c:	e7b2      	b.n	8004384 <__sflush_r+0x18>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	e7ae      	b.n	8004386 <__sflush_r+0x1a>
 8004428:	690f      	ldr	r7, [r1, #16]
 800442a:	2f00      	cmp	r7, #0
 800442c:	d0aa      	beq.n	8004384 <__sflush_r+0x18>
 800442e:	0793      	lsls	r3, r2, #30
 8004430:	bf18      	it	ne
 8004432:	2300      	movne	r3, #0
 8004434:	680e      	ldr	r6, [r1, #0]
 8004436:	bf08      	it	eq
 8004438:	694b      	ldreq	r3, [r1, #20]
 800443a:	1bf6      	subs	r6, r6, r7
 800443c:	600f      	str	r7, [r1, #0]
 800443e:	608b      	str	r3, [r1, #8]
 8004440:	2e00      	cmp	r6, #0
 8004442:	dd9f      	ble.n	8004384 <__sflush_r+0x18>
 8004444:	4633      	mov	r3, r6
 8004446:	463a      	mov	r2, r7
 8004448:	4628      	mov	r0, r5
 800444a:	6a21      	ldr	r1, [r4, #32]
 800444c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004450:	47e0      	blx	ip
 8004452:	2800      	cmp	r0, #0
 8004454:	dc06      	bgt.n	8004464 <__sflush_r+0xf8>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	e790      	b.n	8004386 <__sflush_r+0x1a>
 8004464:	4407      	add	r7, r0
 8004466:	1a36      	subs	r6, r6, r0
 8004468:	e7ea      	b.n	8004440 <__sflush_r+0xd4>
 800446a:	bf00      	nop
 800446c:	20400001 	.word	0x20400001

08004470 <_fflush_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	690b      	ldr	r3, [r1, #16]
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b913      	cbnz	r3, 8004480 <_fflush_r+0x10>
 800447a:	2500      	movs	r5, #0
 800447c:	4628      	mov	r0, r5
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	b118      	cbz	r0, 800448a <_fflush_r+0x1a>
 8004482:	6983      	ldr	r3, [r0, #24]
 8004484:	b90b      	cbnz	r3, 800448a <_fflush_r+0x1a>
 8004486:	f000 f887 	bl	8004598 <__sinit>
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <_fflush_r+0x6c>)
 800448c:	429c      	cmp	r4, r3
 800448e:	d11b      	bne.n	80044c8 <_fflush_r+0x58>
 8004490:	686c      	ldr	r4, [r5, #4]
 8004492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ef      	beq.n	800447a <_fflush_r+0xa>
 800449a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800449c:	07d0      	lsls	r0, r2, #31
 800449e:	d404      	bmi.n	80044aa <_fflush_r+0x3a>
 80044a0:	0599      	lsls	r1, r3, #22
 80044a2:	d402      	bmi.n	80044aa <_fflush_r+0x3a>
 80044a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a6:	f000 f915 	bl	80046d4 <__retarget_lock_acquire_recursive>
 80044aa:	4628      	mov	r0, r5
 80044ac:	4621      	mov	r1, r4
 80044ae:	f7ff ff5d 	bl	800436c <__sflush_r>
 80044b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044b4:	4605      	mov	r5, r0
 80044b6:	07da      	lsls	r2, r3, #31
 80044b8:	d4e0      	bmi.n	800447c <_fflush_r+0xc>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	d4dd      	bmi.n	800447c <_fflush_r+0xc>
 80044c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c2:	f000 f908 	bl	80046d6 <__retarget_lock_release_recursive>
 80044c6:	e7d9      	b.n	800447c <_fflush_r+0xc>
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_fflush_r+0x70>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d101      	bne.n	80044d2 <_fflush_r+0x62>
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	e7df      	b.n	8004492 <_fflush_r+0x22>
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <_fflush_r+0x74>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf08      	it	eq
 80044d8:	68ec      	ldreq	r4, [r5, #12]
 80044da:	e7da      	b.n	8004492 <_fflush_r+0x22>
 80044dc:	08004b04 	.word	0x08004b04
 80044e0:	08004b24 	.word	0x08004b24
 80044e4:	08004ae4 	.word	0x08004ae4

080044e8 <std>:
 80044e8:	2300      	movs	r3, #0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	4604      	mov	r4, r0
 80044ee:	e9c0 3300 	strd	r3, r3, [r0]
 80044f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044f6:	6083      	str	r3, [r0, #8]
 80044f8:	8181      	strh	r1, [r0, #12]
 80044fa:	6643      	str	r3, [r0, #100]	; 0x64
 80044fc:	81c2      	strh	r2, [r0, #14]
 80044fe:	6183      	str	r3, [r0, #24]
 8004500:	4619      	mov	r1, r3
 8004502:	2208      	movs	r2, #8
 8004504:	305c      	adds	r0, #92	; 0x5c
 8004506:	f7ff f9eb 	bl	80038e0 <memset>
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <std+0x38>)
 800450c:	6224      	str	r4, [r4, #32]
 800450e:	6263      	str	r3, [r4, #36]	; 0x24
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <std+0x3c>)
 8004512:	62a3      	str	r3, [r4, #40]	; 0x28
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <std+0x40>)
 8004516:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <std+0x44>)
 800451a:	6323      	str	r3, [r4, #48]	; 0x30
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	08004861 	.word	0x08004861
 8004524:	08004883 	.word	0x08004883
 8004528:	080048bb 	.word	0x080048bb
 800452c:	080048df 	.word	0x080048df

08004530 <_cleanup_r>:
 8004530:	4901      	ldr	r1, [pc, #4]	; (8004538 <_cleanup_r+0x8>)
 8004532:	f000 b8af 	b.w	8004694 <_fwalk_reent>
 8004536:	bf00      	nop
 8004538:	08004471 	.word	0x08004471

0800453c <__sfmoreglue>:
 800453c:	2268      	movs	r2, #104	; 0x68
 800453e:	b570      	push	{r4, r5, r6, lr}
 8004540:	1e4d      	subs	r5, r1, #1
 8004542:	4355      	muls	r5, r2
 8004544:	460e      	mov	r6, r1
 8004546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800454a:	f7ff fad5 	bl	8003af8 <_malloc_r>
 800454e:	4604      	mov	r4, r0
 8004550:	b140      	cbz	r0, 8004564 <__sfmoreglue+0x28>
 8004552:	2100      	movs	r1, #0
 8004554:	e9c0 1600 	strd	r1, r6, [r0]
 8004558:	300c      	adds	r0, #12
 800455a:	60a0      	str	r0, [r4, #8]
 800455c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004560:	f7ff f9be 	bl	80038e0 <memset>
 8004564:	4620      	mov	r0, r4
 8004566:	bd70      	pop	{r4, r5, r6, pc}

08004568 <__sfp_lock_acquire>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__sfp_lock_acquire+0x8>)
 800456a:	f000 b8b3 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	20001111 	.word	0x20001111

08004574 <__sfp_lock_release>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sfp_lock_release+0x8>)
 8004576:	f000 b8ae 	b.w	80046d6 <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	20001111 	.word	0x20001111

08004580 <__sinit_lock_acquire>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__sinit_lock_acquire+0x8>)
 8004582:	f000 b8a7 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	20001112 	.word	0x20001112

0800458c <__sinit_lock_release>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__sinit_lock_release+0x8>)
 800458e:	f000 b8a2 	b.w	80046d6 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	20001112 	.word	0x20001112

08004598 <__sinit>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	f7ff fff0 	bl	8004580 <__sinit_lock_acquire>
 80045a0:	69a3      	ldr	r3, [r4, #24]
 80045a2:	b11b      	cbz	r3, 80045ac <__sinit+0x14>
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a8:	f7ff bff0 	b.w	800458c <__sinit_lock_release>
 80045ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045b0:	6523      	str	r3, [r4, #80]	; 0x50
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <__sinit+0x68>)
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <__sinit+0x6c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	bf08      	it	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	4620      	mov	r0, r4
 80045c2:	bf08      	it	eq
 80045c4:	61a3      	streq	r3, [r4, #24]
 80045c6:	f000 f81f 	bl	8004608 <__sfp>
 80045ca:	6060      	str	r0, [r4, #4]
 80045cc:	4620      	mov	r0, r4
 80045ce:	f000 f81b 	bl	8004608 <__sfp>
 80045d2:	60a0      	str	r0, [r4, #8]
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 f817 	bl	8004608 <__sfp>
 80045da:	2200      	movs	r2, #0
 80045dc:	2104      	movs	r1, #4
 80045de:	60e0      	str	r0, [r4, #12]
 80045e0:	6860      	ldr	r0, [r4, #4]
 80045e2:	f7ff ff81 	bl	80044e8 <std>
 80045e6:	2201      	movs	r2, #1
 80045e8:	2109      	movs	r1, #9
 80045ea:	68a0      	ldr	r0, [r4, #8]
 80045ec:	f7ff ff7c 	bl	80044e8 <std>
 80045f0:	2202      	movs	r2, #2
 80045f2:	2112      	movs	r1, #18
 80045f4:	68e0      	ldr	r0, [r4, #12]
 80045f6:	f7ff ff77 	bl	80044e8 <std>
 80045fa:	2301      	movs	r3, #1
 80045fc:	61a3      	str	r3, [r4, #24]
 80045fe:	e7d1      	b.n	80045a4 <__sinit+0xc>
 8004600:	080049fc 	.word	0x080049fc
 8004604:	08004531 	.word	0x08004531

08004608 <__sfp>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	4607      	mov	r7, r0
 800460c:	f7ff ffac 	bl	8004568 <__sfp_lock_acquire>
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <__sfp+0x84>)
 8004612:	681e      	ldr	r6, [r3, #0]
 8004614:	69b3      	ldr	r3, [r6, #24]
 8004616:	b913      	cbnz	r3, 800461e <__sfp+0x16>
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff ffbd 	bl	8004598 <__sinit>
 800461e:	3648      	adds	r6, #72	; 0x48
 8004620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004624:	3b01      	subs	r3, #1
 8004626:	d503      	bpl.n	8004630 <__sfp+0x28>
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	b30b      	cbz	r3, 8004670 <__sfp+0x68>
 800462c:	6836      	ldr	r6, [r6, #0]
 800462e:	e7f7      	b.n	8004620 <__sfp+0x18>
 8004630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004634:	b9d5      	cbnz	r5, 800466c <__sfp+0x64>
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <__sfp+0x88>)
 8004638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800463c:	60e3      	str	r3, [r4, #12]
 800463e:	6665      	str	r5, [r4, #100]	; 0x64
 8004640:	f000 f847 	bl	80046d2 <__retarget_lock_init_recursive>
 8004644:	f7ff ff96 	bl	8004574 <__sfp_lock_release>
 8004648:	2208      	movs	r2, #8
 800464a:	4629      	mov	r1, r5
 800464c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004654:	6025      	str	r5, [r4, #0]
 8004656:	61a5      	str	r5, [r4, #24]
 8004658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800465c:	f7ff f940 	bl	80038e0 <memset>
 8004660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004668:	4620      	mov	r0, r4
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	3468      	adds	r4, #104	; 0x68
 800466e:	e7d9      	b.n	8004624 <__sfp+0x1c>
 8004670:	2104      	movs	r1, #4
 8004672:	4638      	mov	r0, r7
 8004674:	f7ff ff62 	bl	800453c <__sfmoreglue>
 8004678:	4604      	mov	r4, r0
 800467a:	6030      	str	r0, [r6, #0]
 800467c:	2800      	cmp	r0, #0
 800467e:	d1d5      	bne.n	800462c <__sfp+0x24>
 8004680:	f7ff ff78 	bl	8004574 <__sfp_lock_release>
 8004684:	230c      	movs	r3, #12
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	e7ee      	b.n	8004668 <__sfp+0x60>
 800468a:	bf00      	nop
 800468c:	080049fc 	.word	0x080049fc
 8004690:	ffff0001 	.word	0xffff0001

08004694 <_fwalk_reent>:
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004698:	4606      	mov	r6, r0
 800469a:	4688      	mov	r8, r1
 800469c:	2700      	movs	r7, #0
 800469e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a6:	f1b9 0901 	subs.w	r9, r9, #1
 80046aa:	d505      	bpl.n	80046b8 <_fwalk_reent+0x24>
 80046ac:	6824      	ldr	r4, [r4, #0]
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d1f7      	bne.n	80046a2 <_fwalk_reent+0xe>
 80046b2:	4638      	mov	r0, r7
 80046b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b8:	89ab      	ldrh	r3, [r5, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d907      	bls.n	80046ce <_fwalk_reent+0x3a>
 80046be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c2:	3301      	adds	r3, #1
 80046c4:	d003      	beq.n	80046ce <_fwalk_reent+0x3a>
 80046c6:	4629      	mov	r1, r5
 80046c8:	4630      	mov	r0, r6
 80046ca:	47c0      	blx	r8
 80046cc:	4307      	orrs	r7, r0
 80046ce:	3568      	adds	r5, #104	; 0x68
 80046d0:	e7e9      	b.n	80046a6 <_fwalk_reent+0x12>

080046d2 <__retarget_lock_init_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <__retarget_lock_acquire_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <__retarget_lock_release_recursive>:
 80046d6:	4770      	bx	lr

080046d8 <__swhatbuf_r>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	460e      	mov	r6, r1
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	4614      	mov	r4, r2
 80046e2:	2900      	cmp	r1, #0
 80046e4:	461d      	mov	r5, r3
 80046e6:	b096      	sub	sp, #88	; 0x58
 80046e8:	da08      	bge.n	80046fc <__swhatbuf_r+0x24>
 80046ea:	2200      	movs	r2, #0
 80046ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	061a      	lsls	r2, r3, #24
 80046f4:	d410      	bmi.n	8004718 <__swhatbuf_r+0x40>
 80046f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fa:	e00e      	b.n	800471a <__swhatbuf_r+0x42>
 80046fc:	466a      	mov	r2, sp
 80046fe:	f000 f915 	bl	800492c <_fstat_r>
 8004702:	2800      	cmp	r0, #0
 8004704:	dbf1      	blt.n	80046ea <__swhatbuf_r+0x12>
 8004706:	9a01      	ldr	r2, [sp, #4]
 8004708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800470c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004710:	425a      	negs	r2, r3
 8004712:	415a      	adcs	r2, r3
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	e7ee      	b.n	80046f6 <__swhatbuf_r+0x1e>
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	2000      	movs	r0, #0
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	b016      	add	sp, #88	; 0x58
 8004720:	bd70      	pop	{r4, r5, r6, pc}
	...

08004724 <__smakebuf_r>:
 8004724:	898b      	ldrh	r3, [r1, #12]
 8004726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004728:	079d      	lsls	r5, r3, #30
 800472a:	4606      	mov	r6, r0
 800472c:	460c      	mov	r4, r1
 800472e:	d507      	bpl.n	8004740 <__smakebuf_r+0x1c>
 8004730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2301      	movs	r3, #1
 800473a:	6163      	str	r3, [r4, #20]
 800473c:	b002      	add	sp, #8
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	466a      	mov	r2, sp
 8004742:	ab01      	add	r3, sp, #4
 8004744:	f7ff ffc8 	bl	80046d8 <__swhatbuf_r>
 8004748:	9900      	ldr	r1, [sp, #0]
 800474a:	4605      	mov	r5, r0
 800474c:	4630      	mov	r0, r6
 800474e:	f7ff f9d3 	bl	8003af8 <_malloc_r>
 8004752:	b948      	cbnz	r0, 8004768 <__smakebuf_r+0x44>
 8004754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004758:	059a      	lsls	r2, r3, #22
 800475a:	d4ef      	bmi.n	800473c <__smakebuf_r+0x18>
 800475c:	f023 0303 	bic.w	r3, r3, #3
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	e7e3      	b.n	8004730 <__smakebuf_r+0xc>
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <__smakebuf_r+0x7c>)
 800476a:	62b3      	str	r3, [r6, #40]	; 0x28
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	9b00      	ldr	r3, [sp, #0]
 8004778:	6120      	str	r0, [r4, #16]
 800477a:	6163      	str	r3, [r4, #20]
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	b15b      	cbz	r3, 8004798 <__smakebuf_r+0x74>
 8004780:	4630      	mov	r0, r6
 8004782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004786:	f000 f8e3 	bl	8004950 <_isatty_r>
 800478a:	b128      	cbz	r0, 8004798 <__smakebuf_r+0x74>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	89a0      	ldrh	r0, [r4, #12]
 800479a:	4305      	orrs	r5, r0
 800479c:	81a5      	strh	r5, [r4, #12]
 800479e:	e7cd      	b.n	800473c <__smakebuf_r+0x18>
 80047a0:	08004531 	.word	0x08004531

080047a4 <memchr>:
 80047a4:	4603      	mov	r3, r0
 80047a6:	b510      	push	{r4, lr}
 80047a8:	b2c9      	uxtb	r1, r1
 80047aa:	4402      	add	r2, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	d101      	bne.n	80047b6 <memchr+0x12>
 80047b2:	2000      	movs	r0, #0
 80047b4:	e003      	b.n	80047be <memchr+0x1a>
 80047b6:	7804      	ldrb	r4, [r0, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	428c      	cmp	r4, r1
 80047bc:	d1f6      	bne.n	80047ac <memchr+0x8>
 80047be:	bd10      	pop	{r4, pc}

080047c0 <__malloc_lock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__malloc_lock+0x8>)
 80047c2:	f7ff bf87 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	20001110 	.word	0x20001110

080047cc <__malloc_unlock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__malloc_unlock+0x8>)
 80047ce:	f7ff bf82 	b.w	80046d6 <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	20001110 	.word	0x20001110

080047d8 <_raise_r>:
 80047d8:	291f      	cmp	r1, #31
 80047da:	b538      	push	{r3, r4, r5, lr}
 80047dc:	4604      	mov	r4, r0
 80047de:	460d      	mov	r5, r1
 80047e0:	d904      	bls.n	80047ec <_raise_r+0x14>
 80047e2:	2316      	movs	r3, #22
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80047ee:	b112      	cbz	r2, 80047f6 <_raise_r+0x1e>
 80047f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80047f4:	b94b      	cbnz	r3, 800480a <_raise_r+0x32>
 80047f6:	4620      	mov	r0, r4
 80047f8:	f000 f830 	bl	800485c <_getpid_r>
 80047fc:	462a      	mov	r2, r5
 80047fe:	4601      	mov	r1, r0
 8004800:	4620      	mov	r0, r4
 8004802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004806:	f000 b817 	b.w	8004838 <_kill_r>
 800480a:	2b01      	cmp	r3, #1
 800480c:	d00a      	beq.n	8004824 <_raise_r+0x4c>
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	d103      	bne.n	800481a <_raise_r+0x42>
 8004812:	2316      	movs	r3, #22
 8004814:	6003      	str	r3, [r0, #0]
 8004816:	2001      	movs	r0, #1
 8004818:	e7e7      	b.n	80047ea <_raise_r+0x12>
 800481a:	2400      	movs	r4, #0
 800481c:	4628      	mov	r0, r5
 800481e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004822:	4798      	blx	r3
 8004824:	2000      	movs	r0, #0
 8004826:	e7e0      	b.n	80047ea <_raise_r+0x12>

08004828 <raise>:
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <raise+0xc>)
 800482a:	4601      	mov	r1, r0
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f7ff bfd3 	b.w	80047d8 <_raise_r>
 8004832:	bf00      	nop
 8004834:	20000024 	.word	0x20000024

08004838 <_kill_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	2300      	movs	r3, #0
 800483c:	4d06      	ldr	r5, [pc, #24]	; (8004858 <_kill_r+0x20>)
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	602b      	str	r3, [r5, #0]
 8004846:	f7fc fef6 	bl	8001636 <_kill>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d102      	bne.n	8004854 <_kill_r+0x1c>
 800484e:	682b      	ldr	r3, [r5, #0]
 8004850:	b103      	cbz	r3, 8004854 <_kill_r+0x1c>
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	bd38      	pop	{r3, r4, r5, pc}
 8004856:	bf00      	nop
 8004858:	20001114 	.word	0x20001114

0800485c <_getpid_r>:
 800485c:	f7fc bee4 	b.w	8001628 <_getpid>

08004860 <__sread>:
 8004860:	b510      	push	{r4, lr}
 8004862:	460c      	mov	r4, r1
 8004864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004868:	f000 f894 	bl	8004994 <_read_r>
 800486c:	2800      	cmp	r0, #0
 800486e:	bfab      	itete	ge
 8004870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004872:	89a3      	ldrhlt	r3, [r4, #12]
 8004874:	181b      	addge	r3, r3, r0
 8004876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800487a:	bfac      	ite	ge
 800487c:	6563      	strge	r3, [r4, #84]	; 0x54
 800487e:	81a3      	strhlt	r3, [r4, #12]
 8004880:	bd10      	pop	{r4, pc}

08004882 <__swrite>:
 8004882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004886:	461f      	mov	r7, r3
 8004888:	898b      	ldrh	r3, [r1, #12]
 800488a:	4605      	mov	r5, r0
 800488c:	05db      	lsls	r3, r3, #23
 800488e:	460c      	mov	r4, r1
 8004890:	4616      	mov	r6, r2
 8004892:	d505      	bpl.n	80048a0 <__swrite+0x1e>
 8004894:	2302      	movs	r3, #2
 8004896:	2200      	movs	r2, #0
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	f000 f868 	bl	8004970 <_lseek_r>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	4632      	mov	r2, r6
 80048a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a8:	81a3      	strh	r3, [r4, #12]
 80048aa:	4628      	mov	r0, r5
 80048ac:	463b      	mov	r3, r7
 80048ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	f000 b817 	b.w	80048e8 <_write_r>

080048ba <__sseek>:
 80048ba:	b510      	push	{r4, lr}
 80048bc:	460c      	mov	r4, r1
 80048be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c2:	f000 f855 	bl	8004970 <_lseek_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	bf15      	itete	ne
 80048cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80048ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048d6:	81a3      	strheq	r3, [r4, #12]
 80048d8:	bf18      	it	ne
 80048da:	81a3      	strhne	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__sclose>:
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 b813 	b.w	800490c <_close_r>
	...

080048e8 <_write_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	4d05      	ldr	r5, [pc, #20]	; (8004908 <_write_r+0x20>)
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc fed4 	bl	80016a4 <_write>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_write_r+0x1e>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_write_r+0x1e>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	20001114 	.word	0x20001114

0800490c <_close_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	2300      	movs	r3, #0
 8004910:	4d05      	ldr	r5, [pc, #20]	; (8004928 <_close_r+0x1c>)
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	f7fc fee0 	bl	80016dc <_close>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_close_r+0x1a>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_close_r+0x1a>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20001114 	.word	0x20001114

0800492c <_fstat_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	2300      	movs	r3, #0
 8004930:	4d06      	ldr	r5, [pc, #24]	; (800494c <_fstat_r+0x20>)
 8004932:	4604      	mov	r4, r0
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	f7fc feda 	bl	80016f2 <_fstat>
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	d102      	bne.n	8004948 <_fstat_r+0x1c>
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	b103      	cbz	r3, 8004948 <_fstat_r+0x1c>
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	20001114 	.word	0x20001114

08004950 <_isatty_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	2300      	movs	r3, #0
 8004954:	4d05      	ldr	r5, [pc, #20]	; (800496c <_isatty_r+0x1c>)
 8004956:	4604      	mov	r4, r0
 8004958:	4608      	mov	r0, r1
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	f7fc fed8 	bl	8001710 <_isatty>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_isatty_r+0x1a>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_isatty_r+0x1a>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	20001114 	.word	0x20001114

08004970 <_lseek_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	2200      	movs	r2, #0
 800497a:	4d05      	ldr	r5, [pc, #20]	; (8004990 <_lseek_r+0x20>)
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fc fed0 	bl	8001724 <_lseek>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_lseek_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_lseek_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20001114 	.word	0x20001114

08004994 <_read_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	2200      	movs	r2, #0
 800499e:	4d05      	ldr	r5, [pc, #20]	; (80049b4 <_read_r+0x20>)
 80049a0:	602a      	str	r2, [r5, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7fc fe61 	bl	800166a <_read>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_read_r+0x1e>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_read_r+0x1e>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	20001114 	.word	0x20001114

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
